{"ast":null,"code":"var _jsxFileName = \"/Users/farzanhaq/Desktop/PropertyPal/src/components/Results/Results.tsx\",\n    _s = $RefreshSig$();\n\nimport { FilterOutlined } from \"@ant-design/icons\";\nimport { Divider, Table, Typography, message, Switch } from \"antd\";\nimport { FormContext } from \"../../utils/FormState\";\nimport { useContext, useEffect, useState } from \"react\";\nimport { BathroomsKind, BedroomsKind, BudgetKind, OccupancyKind, SqftKind } from \"../../utils/enums\";\nimport { useHistory } from \"react-router-dom\";\nimport { StyledSubtitle, StyledTitle } from \"../Styles/Title.style\";\nimport { StyledDiv } from \"../Styles/Div.style\";\nimport API, { graphqlOperation } from \"@aws-amplify/api\";\nimport { listScreenings, listUnits } from \"../../graphql/queries\";\nimport { StyledLoadingIcon } from \"../Styles/LoadingOutlined.style\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst {\n  Column\n} = Table;\n\nconst loadingIcon = /*#__PURE__*/_jsxDEV(StyledLoadingIcon, {\n  spin: true\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 41,\n  columnNumber: 21\n}, this);\n\nconst Results = () => {\n  _s();\n\n  const [units, setUnits] = useState([]);\n  const [screening, setScreening] = useState();\n  const [enableFilters, setEnableFilters] = useState(true);\n  const {\n    formState\n  } = useContext(FormContext);\n  const history = useHistory();\n  useEffect(() => {\n    message.info({\n      content: \"Tip: Click on the filter icon to narrow your results\",\n      icon: /*#__PURE__*/_jsxDEV(FilterOutlined, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 13\n      }, this),\n      duration: 5\n    });\n    getUnits();\n    getScreening();\n  }, []);\n  useEffect(() => {\n    getUnits();\n  }, [enableFilters]);\n\n  const getUnits = async () => {\n    try {\n      const allUnits = await API.graphql(graphqlOperation(listUnits));\n      setUnits(allUnits.data.listUnits.items);\n    } catch (err) {\n      console.log(\"error getting units: \" + err);\n    }\n  };\n\n  const getScreening = async () => {\n    try {\n      const screeningData = await API.graphql(graphqlOperation(listScreenings));\n      setScreening(screeningData.data.listScreenings.items[0]);\n    } catch (err) {\n      console.log(\"error getting screening data: \" + err);\n    }\n  };\n\n  const getDefaultNumBedrooms = () => {\n    const numBedrooms = screening === null || screening === void 0 ? void 0 : screening.num_bedrooms.map(bedroom => {\n      switch (bedroom) {\n        case BedroomsKind.BACHELOR:\n          return BedroomsKind.BACHELOR.toString();\n\n        case BedroomsKind.ONE_BED:\n          return BedroomsKind.ONE_BED.toString();\n\n        case BedroomsKind.ONE_BED_PLUS_DEN:\n          return BedroomsKind.ONE_BED_PLUS_DEN.toString();\n\n        case BedroomsKind.TWO_BED:\n          return BedroomsKind.TWO_BED.toString();\n\n        case BedroomsKind.TWO_BED_PLUS_DEN:\n          return BedroomsKind.TWO_BED_PLUS_DEN.toString();\n\n        default:\n          return \"\";\n      }\n    });\n\n    if (enableFilters === false) {\n      console.log(\"here\");\n      return null;\n    }\n\n    return numBedrooms;\n  };\n\n  const getDefaultNumBathrooms = () => {\n    const numBathrooms = screening === null || screening === void 0 ? void 0 : screening.num_bathrooms.map(bathroom => {\n      switch (bathroom) {\n        case BathroomsKind.ONE_BATH:\n          return BathroomsKind.ONE_BATH.toString();\n\n        case BathroomsKind.TWO_BATH:\n          return BathroomsKind.TWO_BATH.toString();\n\n        case BathroomsKind.THREE_BATH:\n          return BathroomsKind.THREE_BATH.toString();\n\n        default:\n          return \"\";\n      }\n    });\n    return numBathrooms;\n  };\n\n  const getDefaultPrice = () => {\n    const prices = [BudgetKind.ZERO, BudgetKind.ONE_MILLION, BudgetKind.TWO_MILLION, BudgetKind.THREE_MILLION, BudgetKind.FOUR_MILLION].filter(price => {\n      return price >= formState.budget[0] && price < formState.budget[1];\n    }).map(price => {\n      return price.toString();\n    });\n    return prices;\n  };\n\n  console.log(enableFilters);\n  return /*#__PURE__*/_jsxDEV(StyledDiv, {\n    children: [/*#__PURE__*/_jsxDEV(Typography, {\n      children: [/*#__PURE__*/_jsxDEV(StyledTitle, {\n        level: 2,\n        children: \"Property Finder\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(StyledSubtitle, {\n        level: 5,\n        type: \"secondary\",\n        children: \"A list of our available properties\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Divider, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 156,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(Switch, {\n        checkedChildren: \"Filtered\",\n        unCheckedChildren: \"Filtered\",\n        defaultChecked: true,\n        onChange: () => {\n          setEnableFilters(!enableFilters);\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 159,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Table, {\n        style: {\n          cursor: \"pointer\"\n        },\n        dataSource: units,\n        pagination: {\n          pageSize: 25\n        },\n        scroll: {\n          y: 350\n        },\n        loading: screening ? false : true,\n        onRow: record => {\n          return {\n            onClick: () => history.push(`result/${record.id}`)\n          };\n        },\n        children: [/*#__PURE__*/_jsxDEV(Column, {\n          title: \"Unit\",\n          dataIndex: \"unit_number\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 179,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Column, {\n          title: \"SQFT\",\n          dataIndex: \"square_ft\",\n          filters: [{\n            text: \"0 - 1K\",\n            value: SqftKind.ZERO\n          }, {\n            text: \"1K - 2K\",\n            value: SqftKind.ONE_THOUSAND\n          }, {\n            text: \"2K - 3K\",\n            value: SqftKind.TWO_THOUSAND\n          }, {\n            text: \"3K - 4K\",\n            value: SqftKind.THREE_THOUSAND\n          }, {\n            text: \"4K - 5K\",\n            value: SqftKind.FOUR_THOUSAND\n          }],\n          sorter: (a, b) => a.square_ft - b.square_ft,\n          onFilter: (value, record) => {\n            return record.square_ft >= value && record.square_ft < Number(value) + 1000;\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 180,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Column, {\n          title: \"Beds\",\n          dataIndex: \"beds\",\n          filters: [{\n            text: \"Bachelor\",\n            value: BedroomsKind.BACHELOR\n          }, {\n            text: \"1\",\n            value: BedroomsKind.ONE_BED\n          }, {\n            text: \"1 + Den\",\n            value: BedroomsKind.ONE_BED_PLUS_DEN\n          }, {\n            text: \"2\",\n            value: BedroomsKind.TWO_BED\n          }, {\n            text: \"2 + Den\",\n            value: BedroomsKind.TWO_BED_PLUS_DEN\n          }],\n          defaultFilteredValue: getDefaultNumBedrooms(),\n          onFilter: (value, record) => {\n            return record.beds.toString().indexOf(value.toString()) === 0;\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 213,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Column, {\n          title: \"Baths\",\n          dataIndex: \"baths\",\n          filters: [{\n            text: \"1\",\n            value: BathroomsKind.ONE_BATH\n          }, {\n            text: \"2\",\n            value: BathroomsKind.TWO_BATH\n          }, {\n            text: \"3\",\n            value: BathroomsKind.THREE_BATH\n          }],\n          sorter: (a, b) => a.baths - b.baths,\n          defaultFilteredValue: enableFilters ? getDefaultNumBathrooms() : null,\n          onFilter: (value, record) => {\n            return record.baths.toString().indexOf(value.toString()) === 0;\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 243,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Column, {\n          title: \"Price\",\n          dataIndex: \"price\",\n          filters: [{\n            text: \"$0 - $1M\",\n            value: BudgetKind.ZERO\n          }, {\n            text: \"$1M - $2M\",\n            value: BudgetKind.ONE_MILLION\n          }, {\n            text: \"$2M - $3M\",\n            value: BudgetKind.TWO_MILLION\n          }, {\n            text: \"$3M - $4M\",\n            value: BudgetKind.THREE_MILLION\n          }, {\n            text: \"$4M - $5M\",\n            value: BudgetKind.FOUR_MILLION\n          }],\n          sorter: (a, b) => parseInt(a.price.replace(/,/g, \"\")) - parseInt(b.price.replace(/,/g, \"\")),\n          defaultFilteredValue: enableFilters ? getDefaultPrice() : null,\n          onFilter: (value, record) => {\n            return parseInt(record.price.replace(/,/g, \"\")) > value && parseInt(record.price.replace(/,/g, \"\")) < Number(value) + BudgetKind.ONE_MILLION;\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 268,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Column, {\n          title: \"Occupancy\",\n          dataIndex: \"occupancy_date\",\n          filters: [{\n            text: \"2022\",\n            value: OccupancyKind.TWO_THOUSAND_AND_TWENTY_TWO\n          }, {\n            text: \"2023\",\n            value: OccupancyKind.TWO_THOUSAND_AND_TWENTY_THREE\n          }, {\n            text: \"2024\",\n            value: OccupancyKind.TWO_THOUSAND_AND_TWENTY_FOUR\n          }],\n          sorter: (a, b) => a.occupancy_date - b.occupancy_date,\n          onFilter: (value, record) => {\n            return record.occupancy_date.toString().indexOf(value.toString()) === 0;\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 306,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 167,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 149,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Results, \"SCsW+OeiVpkLgKNIae2nQ/9tMes=\", false, function () {\n  return [useHistory];\n});\n\n_c = Results;\nexport default Results;\n\nvar _c;\n\n$RefreshReg$(_c, \"Results\");","map":{"version":3,"sources":["/Users/farzanhaq/Desktop/PropertyPal/src/components/Results/Results.tsx"],"names":["FilterOutlined","Divider","Table","Typography","message","Switch","FormContext","useContext","useEffect","useState","BathroomsKind","BedroomsKind","BudgetKind","OccupancyKind","SqftKind","useHistory","StyledSubtitle","StyledTitle","StyledDiv","API","graphqlOperation","listScreenings","listUnits","StyledLoadingIcon","Column","loadingIcon","Results","units","setUnits","screening","setScreening","enableFilters","setEnableFilters","formState","history","info","content","icon","duration","getUnits","getScreening","allUnits","graphql","data","items","err","console","log","screeningData","getDefaultNumBedrooms","numBedrooms","num_bedrooms","map","bedroom","BACHELOR","toString","ONE_BED","ONE_BED_PLUS_DEN","TWO_BED","TWO_BED_PLUS_DEN","getDefaultNumBathrooms","numBathrooms","num_bathrooms","bathroom","ONE_BATH","TWO_BATH","THREE_BATH","getDefaultPrice","prices","ZERO","ONE_MILLION","TWO_MILLION","THREE_MILLION","FOUR_MILLION","filter","price","budget","cursor","pageSize","y","record","onClick","push","id","text","value","ONE_THOUSAND","TWO_THOUSAND","THREE_THOUSAND","FOUR_THOUSAND","a","b","square_ft","Number","beds","indexOf","baths","parseInt","replace","TWO_THOUSAND_AND_TWENTY_TWO","TWO_THOUSAND_AND_TWENTY_THREE","TWO_THOUSAND_AND_TWENTY_FOUR","occupancy_date"],"mappings":"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","sourcesContent":["import { FilterOutlined } from \"@ant-design/icons\";\nimport { Divider, Table, Typography, message, Spin, Switch } from \"antd\";\nimport { FormContext } from \"../../utils/FormState\";\nimport { useContext, useEffect, useState } from \"react\";\nimport {\n  BathroomsKind,\n  BedroomsKind,\n  BudgetKind,\n  OccupancyKind,\n  SqftKind,\n} from \"../../utils/enums\";\nimport { useHistory } from \"react-router-dom\";\nimport { StyledSubtitle, StyledTitle } from \"../Styles/Title.style\";\nimport { StyledDiv, StyledLoadingDiv } from \"../Styles/Div.style\";\nimport API, { graphqlOperation } from \"@aws-amplify/api\";\nimport { listScreenings, listUnits } from \"../../graphql/queries\";\nimport { StyledLoadingIcon } from \"../Styles/LoadingOutlined.style\";\n\nconst { Column } = Table;\ninterface Unit {\n  id: string;\n  unit_number: number;\n  price: string;\n  beds: number;\n  baths: number;\n  square_ft: number;\n  occupancy_date: number;\n}\n\ninterface Screening {\n  id: string;\n  user_email: string;\n  buyer_experience: string;\n  buyer_purpose: string;\n  num_bedrooms: number[];\n  num_bathrooms: number[];\n  premiums: string[];\n  budget: number[];\n}\n\nconst loadingIcon = <StyledLoadingIcon spin />;\n\nconst Results = () => {\n  const [units, setUnits] = useState<Unit[]>([]);\n  const [screening, setScreening] = useState<Screening>();\n  const [enableFilters, setEnableFilters] = useState(true);\n  const { formState } = useContext(FormContext);\n  const history = useHistory();\n\n  useEffect(() => {\n    message.info({\n      content: \"Tip: Click on the filter icon to narrow your results\",\n      icon: <FilterOutlined />,\n      duration: 5,\n    });\n\n    getUnits();\n    getScreening();\n  }, []);\n\n  useEffect(() => {\n    getUnits();\n  }, [enableFilters]);\n\n  const getUnits = async () => {\n    try {\n      const allUnits: any = await API.graphql(graphqlOperation(listUnits));\n      setUnits(allUnits.data.listUnits.items);\n    } catch (err) {\n      console.log(\"error getting units: \" + err);\n    }\n  };\n\n  const getScreening = async () => {\n    try {\n      const screeningData: any = await API.graphql(\n        graphqlOperation(listScreenings)\n      );\n      setScreening(screeningData.data.listScreenings.items[0]);\n    } catch (err) {\n      console.log(\"error getting screening data: \" + err);\n    }\n  };\n\n  const getDefaultNumBedrooms = () => {\n    const numBedrooms = screening?.num_bedrooms.map((bedroom: number) => {\n      switch (bedroom) {\n        case BedroomsKind.BACHELOR:\n          return BedroomsKind.BACHELOR.toString();\n        case BedroomsKind.ONE_BED:\n          return BedroomsKind.ONE_BED.toString();\n        case BedroomsKind.ONE_BED_PLUS_DEN:\n          return BedroomsKind.ONE_BED_PLUS_DEN.toString();\n        case BedroomsKind.TWO_BED:\n          return BedroomsKind.TWO_BED.toString();\n        case BedroomsKind.TWO_BED_PLUS_DEN:\n          return BedroomsKind.TWO_BED_PLUS_DEN.toString();\n        default:\n          return \"\";\n      }\n    });\n\n    if (enableFilters === false) {\n      console.log(\"here\")\n      return null;\n    }\n\n    return numBedrooms;\n  };\n\n  const getDefaultNumBathrooms = () => {\n    const numBathrooms = screening?.num_bathrooms.map((bathroom: number) => {\n      switch (bathroom) {\n        case BathroomsKind.ONE_BATH:\n          return BathroomsKind.ONE_BATH.toString();\n        case BathroomsKind.TWO_BATH:\n          return BathroomsKind.TWO_BATH.toString();\n        case BathroomsKind.THREE_BATH:\n          return BathroomsKind.THREE_BATH.toString();\n        default:\n          return \"\";\n      }\n    });\n\n    return numBathrooms;\n  };\n\n  const getDefaultPrice = () => {\n    const prices = [\n      BudgetKind.ZERO,\n      BudgetKind.ONE_MILLION,\n      BudgetKind.TWO_MILLION,\n      BudgetKind.THREE_MILLION,\n      BudgetKind.FOUR_MILLION,\n    ]\n      .filter((price) => {\n        return price >= formState.budget[0] && price < formState.budget[1];\n      })\n      .map((price) => {\n        return price.toString();\n      });\n\n    return prices;\n  };\n\n  console.log(enableFilters);\n\n  return (\n    <StyledDiv>\n      <Typography>\n        <StyledTitle level={2}>Property Finder</StyledTitle>\n        <StyledSubtitle level={5} type=\"secondary\">\n          A list of our available properties\n        </StyledSubtitle>\n      </Typography>\n      <Divider />\n\n        <>\n          <Switch\n            checkedChildren=\"Filtered\"\n            unCheckedChildren=\"Filtered\"\n            defaultChecked\n            onChange={() => {\n              setEnableFilters(!enableFilters);\n            }}\n          />\n          <Table<Unit>\n            style={{ cursor: \"pointer\" }}\n            dataSource={units}\n            pagination={{ pageSize: 25 }}\n            scroll={{ y: 350 }}\n            loading={ screening ? false : true }\n            onRow={(record) => {\n              return {\n                onClick: () => history.push(`result/${record.id}`),\n              };\n            }}\n          >\n            <Column<Unit> title=\"Unit\" dataIndex=\"unit_number\" />\n            <Column<Unit>\n              title=\"SQFT\"\n              dataIndex=\"square_ft\"\n              filters={[\n                {\n                  text: \"0 - 1K\",\n                  value: SqftKind.ZERO,\n                },\n                {\n                  text: \"1K - 2K\",\n                  value: SqftKind.ONE_THOUSAND,\n                },\n                {\n                  text: \"2K - 3K\",\n                  value: SqftKind.TWO_THOUSAND,\n                },\n                {\n                  text: \"3K - 4K\",\n                  value: SqftKind.THREE_THOUSAND,\n                },\n                {\n                  text: \"4K - 5K\",\n                  value: SqftKind.FOUR_THOUSAND,\n                },\n              ]}\n              sorter={(a, b) => a.square_ft - b.square_ft}\n              onFilter={(value, record) => {\n                return (\n                  record.square_ft >= value &&\n                  record.square_ft < Number(value) + 1000\n                );\n              }}\n            />\n            <Column<Unit>\n              title=\"Beds\"\n              dataIndex=\"beds\"\n              filters={[\n                {\n                  text: \"Bachelor\",\n                  value: BedroomsKind.BACHELOR,\n                },\n                {\n                  text: \"1\",\n                  value: BedroomsKind.ONE_BED,\n                },\n                {\n                  text: \"1 + Den\",\n                  value: BedroomsKind.ONE_BED_PLUS_DEN,\n                },\n                {\n                  text: \"2\",\n                  value: BedroomsKind.TWO_BED,\n                },\n                {\n                  text: \"2 + Den\",\n                  value: BedroomsKind.TWO_BED_PLUS_DEN,\n                },\n              ]}\n              defaultFilteredValue={getDefaultNumBedrooms()}\n              onFilter={(value, record) => {\n                return record.beds.toString().indexOf(value.toString()) === 0;\n              }}\n            />\n            <Column<Unit>\n              title=\"Baths\"\n              dataIndex=\"baths\"\n              filters={[\n                {\n                  text: \"1\",\n                  value: BathroomsKind.ONE_BATH,\n                },\n                {\n                  text: \"2\",\n                  value: BathroomsKind.TWO_BATH,\n                },\n                {\n                  text: \"3\",\n                  value: BathroomsKind.THREE_BATH,\n                },\n              ]}\n              sorter={(a, b) => a.baths - b.baths}\n              defaultFilteredValue={\n                enableFilters ? getDefaultNumBathrooms() : null\n              }\n              onFilter={(value, record) => {\n                return record.baths.toString().indexOf(value.toString()) === 0;\n              }}\n            />\n            <Column<Unit>\n              title=\"Price\"\n              dataIndex=\"price\"\n              filters={[\n                {\n                  text: \"$0 - $1M\",\n                  value: BudgetKind.ZERO,\n                },\n                {\n                  text: \"$1M - $2M\",\n                  value: BudgetKind.ONE_MILLION,\n                },\n                {\n                  text: \"$2M - $3M\",\n                  value: BudgetKind.TWO_MILLION,\n                },\n                {\n                  text: \"$3M - $4M\",\n                  value: BudgetKind.THREE_MILLION,\n                },\n                {\n                  text: \"$4M - $5M\",\n                  value: BudgetKind.FOUR_MILLION,\n                },\n              ]}\n              sorter={(a, b) =>\n                parseInt(a.price.replace(/,/g, \"\")) -\n                parseInt(b.price.replace(/,/g, \"\"))\n              }\n              defaultFilteredValue={enableFilters ? getDefaultPrice() : null}\n              onFilter={(value, record) => {\n                return (\n                  parseInt(record.price.replace(/,/g, \"\")) > value &&\n                  parseInt(record.price.replace(/,/g, \"\")) <\n                    Number(value) + BudgetKind.ONE_MILLION\n                );\n              }}\n            />\n            <Column<Unit>\n              title=\"Occupancy\"\n              dataIndex=\"occupancy_date\"\n              filters={[\n                {\n                  text: \"2022\",\n                  value: OccupancyKind.TWO_THOUSAND_AND_TWENTY_TWO,\n                },\n                {\n                  text: \"2023\",\n                  value: OccupancyKind.TWO_THOUSAND_AND_TWENTY_THREE,\n                },\n                {\n                  text: \"2024\",\n                  value: OccupancyKind.TWO_THOUSAND_AND_TWENTY_FOUR,\n                },\n              ]}\n              sorter={(a, b) => a.occupancy_date - b.occupancy_date}\n              onFilter={(value, record) => {\n                return (\n                  record.occupancy_date.toString().indexOf(value.toString()) ===\n                  0\n                );\n              }}\n            />\n          </Table>\n        </>\n      \n    </StyledDiv>\n  );\n};\n\nexport default Results;\n"]},"metadata":{},"sourceType":"module"}