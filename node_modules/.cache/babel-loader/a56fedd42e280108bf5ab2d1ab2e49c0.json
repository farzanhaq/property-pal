{"ast":null,"code":"var _jsxFileName = \"/Users/farzanhaq/Desktop/PropertyPal/src/components/Booking/Payment/PaymentButtonContent.tsx\";\nimport { loadStripe } from \"@stripe/stripe-js\";\nimport { Button } from \"antd\";\nimport { API, graphqlOperation } from \"aws-amplify\";\nimport { v4 as uuidv4 } from \"uuid\";\nimport { processPayment } from \"../../../graphql/mutations\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst PaymentButtonContent = () => {\n  const handlePay = async () => {\n    const payload = {\n      id: uuidv4(),\n      total: \"5\",\n      success_url: \"http://localhost:3000/results\",\n      cancel_url: \"http://localhost:3000/results\"\n    };\n    const stripePromise = await loadStripe(\"pk_test_51K6Lv8JfUhuzTQLsnTrk8sZTeap3i5f9QUCq8UlN4Rk0LRc77GbxppRAAqW5yl6RimUU1DSEymcAw4ioHnyAoCI000QFZV7fIs\");\n    const response = await API.graphql(graphqlOperation(processPayment, {\n      input: payload\n    }));\n    console.log(response);\n  };\n  /*stripePromise?.redirectToCheckout({\n          // Make the id field from the Checkout Session creation API response\n          // available to this file, so you can provide it as parameter here\n          // instead of the {{CHECKOUT_SESSION_ID}} placeholder.\n          sessionId: response.session.id\n      }).then(function (result: any) {\n        console.log(result)\n          // If `redirectToCheckout` fails due to a browser or network\n          // error, display the localized error message to your customer\n          // using `result.error.message`.\n      });\n      }*/\n\n\n  return /*#__PURE__*/_jsxDEV(Button, {\n    type: \"primary\",\n    onClick: handlePay,\n    children: \"Pay with Stripe\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 5\n  }, this);\n};\n\n_c = PaymentButtonContent;\nexport default PaymentButtonContent;\n\nvar _c;\n\n$RefreshReg$(_c, \"PaymentButtonContent\");","map":{"version":3,"sources":["/Users/farzanhaq/Desktop/PropertyPal/src/components/Booking/Payment/PaymentButtonContent.tsx"],"names":["loadStripe","Button","API","graphqlOperation","v4","uuidv4","processPayment","PaymentButtonContent","handlePay","payload","id","total","success_url","cancel_url","stripePromise","response","graphql","input","console","log"],"mappings":";AAAA,SAASA,UAAT,QAA2B,mBAA3B;AACA,SAASC,MAAT,QAAuB,MAAvB;AACA,SAASC,GAAT,EAAcC,gBAAd,QAAsC,aAAtC;AACA,SAASC,EAAE,IAAIC,MAAf,QAA6B,MAA7B;AACA,SAASC,cAAT,QAA+B,4BAA/B;;;AAEA,MAAMC,oBAAoB,GAAG,MAAM;AACjC,QAAMC,SAAS,GAAG,YAAY;AAC5B,UAAMC,OAAO,GAAG;AACdC,MAAAA,EAAE,EAAEL,MAAM,EADI;AAEdM,MAAAA,KAAK,EAAE,GAFO;AAGdC,MAAAA,WAAW,EAAE,+BAHC;AAIdC,MAAAA,UAAU,EAAE;AAJE,KAAhB;AAOA,UAAMC,aAAa,GAAG,MAAMd,UAAU,CACpC,6GADoC,CAAtC;AAIA,UAAMe,QAAQ,GAAG,MAAMb,GAAG,CAACc,OAAJ,CACrBb,gBAAgB,CAACG,cAAD,EAAiB;AAAEW,MAAAA,KAAK,EAAER;AAAT,KAAjB,CADK,CAAvB;AAIAS,IAAAA,OAAO,CAACC,GAAR,CAAYJ,QAAZ;AACD,GAjBD;AAmBA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEE,sBACE,QAAC,MAAD;AAAQ,IAAA,IAAI,EAAC,SAAb;AAAuB,IAAA,OAAO,EAAEP,SAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAKD,CAtCD;;KAAMD,oB;AAwCN,eAAeA,oBAAf","sourcesContent":["import { loadStripe } from \"@stripe/stripe-js\";\nimport { Button } from \"antd\";\nimport { API, graphqlOperation } from \"aws-amplify\";\nimport { v4 as uuidv4 } from \"uuid\";\nimport { processPayment } from \"../../../graphql/mutations\";\n\nconst PaymentButtonContent = () => {\n  const handlePay = async () => {\n    const payload = {\n      id: uuidv4(),\n      total: \"5\",\n      success_url: \"http://localhost:3000/results\",\n      cancel_url: \"http://localhost:3000/results\",\n    };\n\n    const stripePromise = await loadStripe(\n      \"pk_test_51K6Lv8JfUhuzTQLsnTrk8sZTeap3i5f9QUCq8UlN4Rk0LRc77GbxppRAAqW5yl6RimUU1DSEymcAw4ioHnyAoCI000QFZV7fIs\"\n    );\n\n    const response = await API.graphql(\n      graphqlOperation(processPayment, { input: payload })\n    );\n\n    console.log(response);\n  };\n\n  /*stripePromise?.redirectToCheckout({\n          // Make the id field from the Checkout Session creation API response\n          // available to this file, so you can provide it as parameter here\n          // instead of the {{CHECKOUT_SESSION_ID}} placeholder.\n          sessionId: response.session.id\n      }).then(function (result: any) {\n        console.log(result)\n          // If `redirectToCheckout` fails due to a browser or network\n          // error, display the localized error message to your customer\n          // using `result.error.message`.\n      });\n      }*/\n\n  return (\n    <Button type=\"primary\" onClick={handlePay}>\n      Pay with Stripe\n    </Button>\n  );\n};\n\nexport default PaymentButtonContent;\n"]},"metadata":{},"sourceType":"module"}