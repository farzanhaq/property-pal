{"ast":null,"code":"var _jsxFileName = \"/Users/farzanhaq/Desktop/PropertyPal/src/components/Booking/Payment/Payment.tsx\",\n    _s = $RefreshSig$();\n\nimport { LeftOutlined } from \"@ant-design/icons\";\nimport { loadStripe } from \"@stripe/stripe-js\";\nimport { Button, Space, Typography } from \"antd\";\nimport { API, graphqlOperation } from \"aws-amplify\";\nimport { useContext } from \"react\";\nimport { processPayment } from \"../../../graphql/mutations\";\nimport { BookingStatusContext } from \"../../../utils/BookingState\";\nimport { StyledButtonNavDiv, StyledContentDiv } from \"../../Styles/Div.style\";\nimport { StyledPrompt } from \"../../Styles/Title.style\";\nimport PaymentButtonContent from \"./PaymentButtonContent\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst Payment = () => {\n  _s();\n\n  const {\n    currentStep,\n    setCurrentStep\n  } = useContext(BookingStatusContext);\n\n  const handlePay = async () => {\n    const payload = {\n      total: \"5\",\n      success_url: \"http://localhost:3000/results\",\n      cancel_url: \"http://localhost:3000/results\"\n    };\n    const stripePromise = await loadStripe(\"pk_test_51K6Lv8JfUhuzTQLsnTrk8sZTeap3i5f9QUCq8UlN4Rk0LRc77GbxppRAAqW5yl6RimUU1DSEymcAw4ioHnyAoCI000QFZV7fIs\");\n    const response = await API.graphql(graphqlOperation(processPayment, {\n      input: payload\n    }));\n    console.log(response);\n  };\n  /*stripePromise?.redirectToCheckout({\n      // Make the id field from the Checkout Session creation API response\n      // available to this file, so you can provide it as parameter here\n      // instead of the {{CHECKOUT_SESSION_ID}} placeholder.\n      sessionId: response.session.id\n  }).then(function (result: any) {\n    console.log(result)\n      // If `redirectToCheckout` fails due to a browser or network\n      // error, display the localized error message to your customer\n      // using `result.error.message`.\n  });\n  }*/\n\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Typography, {\n      children: /*#__PURE__*/_jsxDEV(StyledPrompt, {\n        level: 5,\n        children: \"Please enter your payment details\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(StyledContentDiv, {\n      children: /*#__PURE__*/_jsxDEV(PaymentButtonContent, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(StyledButtonNavDiv, {\n      children: /*#__PURE__*/_jsxDEV(Space, {\n        children: /*#__PURE__*/_jsxDEV(Button, {\n          type: \"primary\",\n          shape: \"circle\",\n          size: \"large\",\n          icon: /*#__PURE__*/_jsxDEV(LeftOutlined, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 62,\n            columnNumber: 19\n          }, this),\n          onClick: () => setCurrentStep(currentStep - 1)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n\n_s(Payment, \"HptfWqLVOju5pj16OrckVMO1cY8=\");\n\n_c = Payment;\nexport default Payment;\n\nvar _c;\n\n$RefreshReg$(_c, \"Payment\");","map":{"version":3,"sources":["/Users/farzanhaq/Desktop/PropertyPal/src/components/Booking/Payment/Payment.tsx"],"names":["LeftOutlined","loadStripe","Button","Space","Typography","API","graphqlOperation","useContext","processPayment","BookingStatusContext","StyledButtonNavDiv","StyledContentDiv","StyledPrompt","PaymentButtonContent","Payment","currentStep","setCurrentStep","handlePay","payload","total","success_url","cancel_url","stripePromise","response","graphql","input","console","log"],"mappings":";;;AAAA,SAASA,YAAT,QAA6B,mBAA7B;AACA,SAASC,UAAT,QAA2B,mBAA3B;AACA,SAASC,MAAT,EAAiBC,KAAjB,EAAwBC,UAAxB,QAA0C,MAA1C;AACA,SAASC,GAAT,EAAcC,gBAAd,QAAsC,aAAtC;AACA,SAASC,UAAT,QAA2B,OAA3B;AACA,SAASC,cAAT,QAA+B,4BAA/B;AACA,SAASC,oBAAT,QAAqC,6BAArC;AACA,SAASC,kBAAT,EAA6BC,gBAA7B,QAAqD,wBAArD;AACA,SAASC,YAAT,QAA6B,0BAA7B;AACA,OAAOC,oBAAP,MAAiC,wBAAjC;;;;AAEA,MAAMC,OAAO,GAAG,MAAM;AAAA;;AACpB,QAAM;AAAEC,IAAAA,WAAF;AAAeC,IAAAA;AAAf,MAAkCT,UAAU,CAACE,oBAAD,CAAlD;;AAEA,QAAMQ,SAAS,GAAG,YAAY;AAC5B,UAAMC,OAAO,GAAG;AACdC,MAAAA,KAAK,EAAE,GADO;AAEdC,MAAAA,WAAW,EAAE,+BAFC;AAGdC,MAAAA,UAAU,EAAE;AAHE,KAAhB;AAMA,UAAMC,aAAa,GAAG,MAAMrB,UAAU,CACpC,6GADoC,CAAtC;AAIA,UAAMsB,QAAQ,GAAG,MAAMlB,GAAG,CAACmB,OAAJ,CACrBlB,gBAAgB,CAACE,cAAD,EAAiB;AAAEiB,MAAAA,KAAK,EAAEP;AAAT,KAAjB,CADK,CAAvB;AAIAQ,IAAAA,OAAO,CAACC,GAAR,CAAYJ,QAAZ;AACD,GAhBD;AAkBA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEE,sBACE;AAAA,4BACE,QAAC,UAAD;AAAA,6BACE,QAAC,YAAD;AAAc,QAAA,KAAK,EAAE,CAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YADF,eAIE,QAAC,gBAAD;AAAA,6BACE,QAAC,oBAAD;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YAJF,eAOE;AAAA;AAAA;AAAA;AAAA,YAPF,eAQE;AAAA;AAAA;AAAA;AAAA,YARF,eASE,QAAC,kBAAD;AAAA,6BACE,QAAC,KAAD;AAAA,+BACE,QAAC,MAAD;AACE,UAAA,IAAI,EAAC,SADP;AAEE,UAAA,KAAK,EAAC,QAFR;AAGE,UAAA,IAAI,EAAC,OAHP;AAIE,UAAA,IAAI,eAAE,QAAC,YAAD;AAAA;AAAA;AAAA;AAAA,kBAJR;AAKE,UAAA,OAAO,EAAE,MAAMP,cAAc,CAACD,WAAW,GAAG,CAAf;AAL/B;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YATF;AAAA,kBADF;AAuBD,CAzDD;;GAAMD,O;;KAAAA,O;AA2DN,eAAeA,OAAf","sourcesContent":["import { LeftOutlined } from \"@ant-design/icons\";\nimport { loadStripe } from \"@stripe/stripe-js\";\nimport { Button, Space, Typography } from \"antd\";\nimport { API, graphqlOperation } from \"aws-amplify\";\nimport { useContext } from \"react\";\nimport { processPayment } from \"../../../graphql/mutations\";\nimport { BookingStatusContext } from \"../../../utils/BookingState\";\nimport { StyledButtonNavDiv, StyledContentDiv } from \"../../Styles/Div.style\";\nimport { StyledPrompt } from \"../../Styles/Title.style\";\nimport PaymentButtonContent from \"./PaymentButtonContent\";\n\nconst Payment = () => {\n  const { currentStep, setCurrentStep } = useContext(BookingStatusContext);\n\n  const handlePay = async () => {\n    const payload = {\n      total: \"5\",\n      success_url: \"http://localhost:3000/results\",\n      cancel_url: \"http://localhost:3000/results\",\n    };\n\n    const stripePromise = await loadStripe(\n      \"pk_test_51K6Lv8JfUhuzTQLsnTrk8sZTeap3i5f9QUCq8UlN4Rk0LRc77GbxppRAAqW5yl6RimUU1DSEymcAw4ioHnyAoCI000QFZV7fIs\"\n    );\n\n    const response = await API.graphql(\n      graphqlOperation(processPayment, { input: payload })\n    );\n\n    console.log(response);\n  };\n\n  /*stripePromise?.redirectToCheckout({\n      // Make the id field from the Checkout Session creation API response\n      // available to this file, so you can provide it as parameter here\n      // instead of the {{CHECKOUT_SESSION_ID}} placeholder.\n      sessionId: response.session.id\n  }).then(function (result: any) {\n    console.log(result)\n      // If `redirectToCheckout` fails due to a browser or network\n      // error, display the localized error message to your customer\n      // using `result.error.message`.\n  });\n  }*/\n\n  return (\n    <>\n      <Typography>\n        <StyledPrompt level={5}>Please enter your payment details</StyledPrompt>\n      </Typography>\n      <StyledContentDiv>\n        <PaymentButtonContent/>\n      </StyledContentDiv>\n      <br />\n      <br />\n      <StyledButtonNavDiv>\n        <Space>\n          <Button\n            type=\"primary\"\n            shape=\"circle\"\n            size=\"large\"\n            icon={<LeftOutlined />}\n            onClick={() => setCurrentStep(currentStep - 1)}\n          />\n        </Space>\n      </StyledButtonNavDiv>\n    </>\n  );\n};\n\nexport default Payment;\n"]},"metadata":{},"sourceType":"module"}