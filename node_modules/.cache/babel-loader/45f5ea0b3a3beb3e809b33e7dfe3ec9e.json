{"ast":null,"code":"var _jsxFileName = \"/Users/farzanhaq/Desktop/PropertyPal/src/components/Routes/PrivateRoute.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useContext } from \"react\";\nimport { useEffect } from \"react\";\nimport { Route, Redirect, useHistory } from \"react-router-dom\";\nimport { Auth } from \"aws-amplify\";\nimport { AuthStatusContext } from \"../../utils/AuthState\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst PrivateRoute = ({\n  component: Component,\n  ...rest\n}) => {\n  _s();\n\n  const {\n    loggedIn,\n    setLoggedIn\n  } = useContext(AuthStatusContext);\n  const history = useHistory();\n  useEffect(() => {\n    Auth.currentAuthenticatedUser().then(() => {\n      setLoggedIn(true);\n    }).catch(() => {\n      setLoggedIn(false);\n      history.push(\"/\");\n    });\n    const unlisten = history.listen(() => {\n      Auth.currentAuthenticatedUser().then(user => console.log(\"user: \", user)).catch(() => {\n        if (loggedIn) {\n          setLoggedIn(false);\n        }\n      });\n    });\n    return () => {\n      unlisten();\n    };\n  }, []);\n  console.log(loggedIn);\n  return /*#__PURE__*/_jsxDEV(Route, { ...rest,\n    render: props => {\n      return loggedIn ? /*#__PURE__*/_jsxDEV(Component, { ...props\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(Redirect, {\n        to: {\n          pathname: \"/\"\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 11\n      }, this);\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 5\n  }, this);\n};\n\n_s(PrivateRoute, \"tQuwmigJKKhjoXQ/5VbBjlEVM2Y=\", false, function () {\n  return [useHistory];\n});\n\n_c = PrivateRoute;\nexport default PrivateRoute;\n\nvar _c;\n\n$RefreshReg$(_c, \"PrivateRoute\");","map":{"version":3,"sources":["/Users/farzanhaq/Desktop/PropertyPal/src/components/Routes/PrivateRoute.tsx"],"names":["React","useContext","useEffect","Route","Redirect","useHistory","Auth","AuthStatusContext","PrivateRoute","component","Component","rest","loggedIn","setLoggedIn","history","currentAuthenticatedUser","then","catch","push","unlisten","listen","user","console","log","props","pathname"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,UAAhB,QAAkC,OAAlC;AACA,SAASC,SAAT,QAAoC,OAApC;AACA,SAASC,KAAT,EAAgBC,QAAhB,EAA0BC,UAA1B,QAA4C,kBAA5C;AACA,SAASC,IAAT,QAAqB,aAArB;AACA,SAASC,iBAAT,QAAkC,uBAAlC;;;AAQA,MAAMC,YAAY,GAAG,CAAC;AAAEC,EAAAA,SAAS,EAAEC,SAAb;AAAwB,KAAGC;AAA3B,CAAD,KAA+C;AAAA;;AAClE,QAAM;AAAEC,IAAAA,QAAF;AAAYC,IAAAA;AAAZ,MAA4BZ,UAAU,CAACM,iBAAD,CAA5C;AACA,QAAMO,OAAO,GAAGT,UAAU,EAA1B;AAEAH,EAAAA,SAAS,CAAC,MAAM;AACdI,IAAAA,IAAI,CAACS,wBAAL,GACGC,IADH,CACQ,MAAM;AACVH,MAAAA,WAAW,CAAC,IAAD,CAAX;AACD,KAHH,EAIGI,KAJH,CAIS,MAAM;AACXJ,MAAAA,WAAW,CAAC,KAAD,CAAX;AACAC,MAAAA,OAAO,CAACI,IAAR,CAAa,GAAb;AACD,KAPH;AASA,UAAMC,QAAQ,GAAGL,OAAO,CAACM,MAAR,CAAe,MAAM;AACpCd,MAAAA,IAAI,CAACS,wBAAL,GACGC,IADH,CACSK,IAAD,IAAUC,OAAO,CAACC,GAAR,CAAY,QAAZ,EAAsBF,IAAtB,CADlB,EAEGJ,KAFH,CAES,MAAM;AACX,YAAIL,QAAJ,EAAc;AACZC,UAAAA,WAAW,CAAC,KAAD,CAAX;AACD;AACF,OANH;AAOD,KARgB,CAAjB;AAUA,WAAO,MAAM;AACXM,MAAAA,QAAQ;AACT,KAFD;AAGD,GAvBQ,EAuBN,EAvBM,CAAT;AAyBAG,EAAAA,OAAO,CAACC,GAAR,CAAYX,QAAZ;AAEA,sBACE,QAAC,KAAD,OACMD,IADN;AAEE,IAAA,MAAM,EAAGa,KAAD,IAAW;AACjB,aAAOZ,QAAQ,gBACb,QAAC,SAAD,OAAeY;AAAf;AAAA;AAAA;AAAA;AAAA,cADa,gBAGb,QAAC,QAAD;AACE,QAAA,EAAE,EAAE;AACFC,UAAAA,QAAQ,EAAE;AADR;AADN;AAAA;AAAA;AAAA;AAAA,cAHF;AASD;AAZH;AAAA;AAAA;AAAA;AAAA,UADF;AAgBD,CA/CD;;GAAMjB,Y;UAEYH,U;;;KAFZG,Y;AAiDN,eAAeA,YAAf","sourcesContent":["import React, { useContext } from \"react\";\nimport { useEffect, useState } from \"react\";\nimport { Route, Redirect, useHistory } from \"react-router-dom\";\nimport { Auth } from \"aws-amplify\";\nimport { AuthStatusContext } from \"../../utils/AuthState\";\n\ninterface IProps {\n  component: React.ComponentType<any>;\n  exact?: boolean;\n  path: string;\n}\n\nconst PrivateRoute = ({ component: Component, ...rest }: IProps) => {\n  const { loggedIn, setLoggedIn } = useContext(AuthStatusContext);\n  const history = useHistory();\n\n  useEffect(() => {\n    Auth.currentAuthenticatedUser()\n      .then(() => {\n        setLoggedIn(true);\n      })\n      .catch(() => {\n        setLoggedIn(false);\n        history.push(\"/\");\n      });\n\n    const unlisten = history.listen(() => {\n      Auth.currentAuthenticatedUser()\n        .then((user) => console.log(\"user: \", user))\n        .catch(() => {\n          if (loggedIn) {\n            setLoggedIn(false);\n          }\n        });\n    });\n\n    return () => {\n      unlisten();\n    };\n  }, []);\n\n  console.log(loggedIn)\n\n  return (\n    <Route\n      {...rest}\n      render={(props) => {\n        return loggedIn ? (\n          <Component {...props} />\n        ) : (\n          <Redirect\n            to={{\n              pathname: \"/\",\n            }}\n          />\n        );\n      }}\n    />\n  );\n};\n\nexport default PrivateRoute;\n"]},"metadata":{},"sourceType":"module"}