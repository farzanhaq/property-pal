{"ast":null,"code":"var _jsxFileName = \"/Users/farzanhaq/Desktop/PropertyPal/src/components/Routes/PrivateRoute.tsx\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport { useEffect, useState } from \"react\";\nimport { Route, Redirect, useHistory } from \"react-router-dom\";\nimport { Auth } from \"aws-amplify\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst PrivateRoute = ({\n  component: Component,\n  ...rest\n}) => {\n  _s();\n\n  const [loaded, setLoaded] = useState(false);\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\n  const history = useHistory();\n  useEffect(() => {\n    authenticate();\n    const unlisten = history.listen(() => {\n      Auth.currentAuthenticatedUser().then(user => console.log(\"user: \", user)).catch(() => {\n        if (isAuthenticated) {\n          setIsAuthenticated(false);\n        }\n      });\n    });\n    return () => {\n      unlisten();\n    };\n  }, []);\n\n  const authenticate = () => {\n    Auth.currentAuthenticatedUser().then(() => {\n      setLoaded(true);\n      setIsAuthenticated(true);\n    }).catch(() => history.push(\"/auth\"));\n  };\n\n  if (!loaded) return null;\n  return /*#__PURE__*/_jsxDEV(Route, { ...rest,\n    render: props => {\n      return isAuthenticated ? /*#__PURE__*/_jsxDEV(Component, { ...props\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(Redirect, {\n        to: {\n          pathname: \"/\"\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 11\n      }, this);\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 47,\n    columnNumber: 5\n  }, this);\n};\n\n_s(PrivateRoute, \"sxlB+kzlmtAlRrtaB4BOH5VIH3s=\", false, function () {\n  return [useHistory];\n});\n\n_c = PrivateRoute;\nexport default PrivateRoute;\n\nvar _c;\n\n$RefreshReg$(_c, \"PrivateRoute\");","map":{"version":3,"sources":["/Users/farzanhaq/Desktop/PropertyPal/src/components/Routes/PrivateRoute.tsx"],"names":["React","useEffect","useState","Route","Redirect","useHistory","Auth","PrivateRoute","component","Component","rest","loaded","setLoaded","isAuthenticated","setIsAuthenticated","history","authenticate","unlisten","listen","currentAuthenticatedUser","then","user","console","log","catch","push","props","pathname"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AACA,SAASC,KAAT,EAAgBC,QAAhB,EAA0BC,UAA1B,QAA4C,kBAA5C;AACA,SAASC,IAAT,QAAqB,aAArB;;;AAQA,MAAMC,YAAY,GAAG,CAAC;AAAEC,EAAAA,SAAS,EAAEC,SAAb;AAAwB,KAAGC;AAA3B,CAAD,KAA+C;AAAA;;AAClE,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsBV,QAAQ,CAAC,KAAD,CAApC;AACA,QAAM,CAACW,eAAD,EAAkBC,kBAAlB,IAAwCZ,QAAQ,CAAC,KAAD,CAAtD;AACA,QAAMa,OAAO,GAAGV,UAAU,EAA1B;AAEAJ,EAAAA,SAAS,CAAC,MAAM;AACde,IAAAA,YAAY;AAEZ,UAAMC,QAAQ,GAAGF,OAAO,CAACG,MAAR,CAAe,MAAM;AACpCZ,MAAAA,IAAI,CAACa,wBAAL,GACGC,IADH,CACSC,IAAD,IAAUC,OAAO,CAACC,GAAR,CAAY,QAAZ,EAAsBF,IAAtB,CADlB,EAEGG,KAFH,CAES,MAAM;AACX,YAAIX,eAAJ,EAAqB;AACnBC,UAAAA,kBAAkB,CAAC,KAAD,CAAlB;AACD;AACF,OANH;AAOD,KARgB,CAAjB;AAUA,WAAO,MAAM;AACXG,MAAAA,QAAQ;AACT,KAFD;AAGD,GAhBQ,EAgBN,EAhBM,CAAT;;AAkBA,QAAMD,YAAY,GAAG,MAAM;AACzBV,IAAAA,IAAI,CAACa,wBAAL,GACGC,IADH,CACQ,MAAM;AACVR,MAAAA,SAAS,CAAC,IAAD,CAAT;AACAE,MAAAA,kBAAkB,CAAC,IAAD,CAAlB;AACD,KAJH,EAKGU,KALH,CAKS,MAAMT,OAAO,CAACU,IAAR,CAAa,OAAb,CALf;AAMD,GAPD;;AASA,MAAI,CAACd,MAAL,EAAa,OAAO,IAAP;AAEb,sBACE,QAAC,KAAD,OACMD,IADN;AAEE,IAAA,MAAM,EAAGgB,KAAD,IAAW;AACjB,aAAOb,eAAe,gBACpB,QAAC,SAAD,OAAea;AAAf;AAAA;AAAA;AAAA;AAAA,cADoB,gBAGpB,QAAC,QAAD;AACE,QAAA,EAAE,EAAE;AACFC,UAAAA,QAAQ,EAAE;AADR;AADN;AAAA;AAAA;AAAA;AAAA,cAHF;AASD;AAZH;AAAA;AAAA;AAAA;AAAA,UADF;AAgBD,CAlDD;;GAAMpB,Y;UAGYF,U;;;KAHZE,Y;AAoDN,eAAeA,YAAf","sourcesContent":["import React from \"react\";\nimport { useEffect, useState } from \"react\";\nimport { Route, Redirect, useHistory } from \"react-router-dom\";\nimport { Auth } from \"aws-amplify\";\n\ninterface IProps {\n  component: React.ComponentType<any>;\n  exact?: boolean;\n  path: string;\n}\n\nconst PrivateRoute = ({ component: Component, ...rest }: IProps) => {\n  const [loaded, setLoaded] = useState(false);\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\n  const history = useHistory();\n\n  useEffect(() => {\n    authenticate();\n\n    const unlisten = history.listen(() => {\n      Auth.currentAuthenticatedUser()\n        .then((user) => console.log(\"user: \", user))\n        .catch(() => {\n          if (isAuthenticated) {\n            setIsAuthenticated(false);\n          }\n        });\n    });\n\n    return () => {\n      unlisten();\n    };\n  }, []);\n\n  const authenticate = () => {\n    Auth.currentAuthenticatedUser()\n      .then(() => {\n        setLoaded(true);\n        setIsAuthenticated(true);\n      })\n      .catch(() => history.push(\"/auth\"));\n  };\n\n  if (!loaded) return null;\n\n  return (\n    <Route\n      {...rest}\n      render={(props) => {\n        return isAuthenticated ? (\n          <Component {...props} />\n        ) : (\n          <Redirect\n            to={{\n              pathname: \"/\",\n            }}\n          />\n        );\n      }}\n    />\n  );\n};\n\nexport default PrivateRoute;\n"]},"metadata":{},"sourceType":"module"}