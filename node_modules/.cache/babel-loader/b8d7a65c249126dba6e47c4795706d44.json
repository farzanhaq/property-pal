{"ast":null,"code":"var _jsxFileName = \"/Users/farzanhaq/Desktop/PropertyPal/src/components/Results/Results.tsx\",\n    _s = $RefreshSig$();\n\nimport { FilterOutlined } from \"@ant-design/icons\";\nimport API, { graphqlOperation } from \"@aws-amplify/api\";\nimport { Divider, message, Spin, Table, Typography } from \"antd\";\nimport { Auth } from \"aws-amplify\";\nimport { useEffect, useState } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport { listScreenings, listUnits } from \"../../graphql/queries\";\nimport { BathroomsKind, BedroomsKind, BudgetKind, OccupancyKind, SqftKind } from \"../../utils/enums\";\nimport { StyledDiv, StyledLoadingDiv } from \"../Styles/Div.style\";\nimport { StyledLoadingIcon } from \"../Styles/LoadingOutlined.style\";\nimport { StyledSubtitle, StyledTitle } from \"../Styles/Title.style\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst {\n  Column\n} = Table;\n\nconst loadingIcon = /*#__PURE__*/_jsxDEV(StyledLoadingIcon, {\n  spin: true\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 21,\n  columnNumber: 21\n}, this);\n\nconst Results = () => {\n  _s();\n\n  const [units, setUnits] = useState([]);\n  const [screening, setScreening] = useState();\n  const history = useHistory();\n  useEffect(() => {\n    message.info({\n      content: \"Tip: Click on the filter icon to narrow your results\",\n      icon: /*#__PURE__*/_jsxDEV(FilterOutlined, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 13\n      }, this),\n      duration: 5\n    });\n    getUnits();\n    getScreening();\n    return () => {\n      setUnits([]);\n      setScreening(undefined);\n    };\n  }, []);\n\n  const getUnits = async () => {\n    try {\n      const allUnits = await API.graphql(graphqlOperation(listUnits));\n      setUnits(allUnits.data.listUnits.items);\n    } catch (err) {\n      console.log(\"error getting units: \" + err);\n    }\n  };\n\n  const getScreening = async () => {\n    try {\n      const {\n        attributes: {\n          email\n        }\n      } = await Auth.currentAuthenticatedUser();\n      const filter = {\n        user_email: {\n          eq: email\n        }\n      };\n      const screenings = await API.graphql({\n        query: listScreenings,\n        variables: {\n          filter: filter\n        }\n      });\n      setScreening(screenings.data.listScreenings.items[0]);\n    } catch (err) {\n      console.log(\"error getting screening data: \" + err);\n    }\n  };\n\n  const getDefaultNumBedrooms = () => {\n    const numBedrooms = screening === null || screening === void 0 ? void 0 : screening.num_bedrooms.map(bedroom => {\n      switch (bedroom) {\n        case BedroomsKind.BACHELOR:\n          return BedroomsKind.BACHELOR.toString();\n\n        case BedroomsKind.ONE_BED:\n          return BedroomsKind.ONE_BED.toString();\n\n        case BedroomsKind.ONE_BED_PLUS_DEN:\n          return BedroomsKind.ONE_BED_PLUS_DEN.toString();\n\n        case BedroomsKind.TWO_BED:\n          return BedroomsKind.TWO_BED.toString();\n\n        case BedroomsKind.TWO_BED_PLUS_DEN:\n          return BedroomsKind.TWO_BED_PLUS_DEN.toString();\n\n        default:\n          return \"\";\n      }\n    });\n    return numBedrooms;\n  };\n\n  const getDefaultNumBathrooms = () => {\n    const numBathrooms = screening === null || screening === void 0 ? void 0 : screening.num_bathrooms.map(bathroom => {\n      switch (bathroom) {\n        case BathroomsKind.ONE_BATH:\n          return BathroomsKind.ONE_BATH.toString();\n\n        case BathroomsKind.TWO_BATH:\n          return BathroomsKind.TWO_BATH.toString();\n\n        case BathroomsKind.THREE_BATH:\n          return BathroomsKind.THREE_BATH.toString();\n\n        default:\n          return \"\";\n      }\n    });\n    return numBathrooms;\n  };\n\n  const getDefaultPrice = () => {\n    const prices = screening ? [BudgetKind.ZERO, BudgetKind.ONE_MILLION, BudgetKind.TWO_MILLION, BudgetKind.THREE_MILLION, BudgetKind.FOUR_MILLION].filter(price => {\n      return price >= (screening === null || screening === void 0 ? void 0 : screening.budget[0]) && price < (screening === null || screening === void 0 ? void 0 : screening.budget[1]);\n    }).map(price => {\n      return price.toString();\n    }) : undefined;\n    return prices;\n  };\n\n  return /*#__PURE__*/_jsxDEV(StyledDiv, {\n    children: [/*#__PURE__*/_jsxDEV(Typography, {\n      children: [/*#__PURE__*/_jsxDEV(StyledTitle, {\n        level: 2,\n        children: \"Property Finder\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 168,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(StyledSubtitle, {\n        level: 5,\n        type: \"secondary\",\n        children: \"A list of our available properties\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 169,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 167,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Divider, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 173,\n      columnNumber: 7\n    }, this), screening ? /*#__PURE__*/_jsxDEV(Table, {\n      style: {\n        cursor: \"pointer\"\n      },\n      dataSource: units,\n      pagination: {\n        pageSize: 25\n      },\n      scroll: {\n        y: 350\n      },\n      onRow: record => {\n        return {\n          onClick: () => history.push(`result/${record.id}`)\n        };\n      },\n      children: [/*#__PURE__*/_jsxDEV(Column, {\n        title: \"Unit\",\n        dataIndex: \"unit_number\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 186,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Column, {\n        title: \"SQFT\",\n        dataIndex: \"square_ft\",\n        filters: [{\n          text: \"0 - 1K\",\n          value: SqftKind.ZERO\n        }, {\n          text: \"1K - 2K\",\n          value: SqftKind.ONE_THOUSAND\n        }, {\n          text: \"2K - 3K\",\n          value: SqftKind.TWO_THOUSAND\n        }, {\n          text: \"3K - 4K\",\n          value: SqftKind.THREE_THOUSAND\n        }, {\n          text: \"4K - 5K\",\n          value: SqftKind.FOUR_THOUSAND\n        }],\n        sorter: (a, b) => a.square_ft - b.square_ft,\n        onFilter: (value, record) => {\n          return record.square_ft >= value && record.square_ft < Number(value) + 1000;\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 187,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Column, {\n        title: \"Beds\",\n        dataIndex: \"beds\",\n        filters: [{\n          text: \"Bachelor\",\n          value: BedroomsKind.BACHELOR\n        }, {\n          text: \"1\",\n          value: BedroomsKind.ONE_BED\n        }, {\n          text: \"1 + Den\",\n          value: BedroomsKind.ONE_BED_PLUS_DEN\n        }, {\n          text: \"2\",\n          value: BedroomsKind.TWO_BED\n        }, {\n          text: \"2 + Den\",\n          value: BedroomsKind.TWO_BED_PLUS_DEN\n        }],\n        defaultFilteredValue: getDefaultNumBedrooms(),\n        onFilter: (value, record) => {\n          return record.beds.toString().indexOf(value.toString()) === 0;\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 220,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Column, {\n        title: \"Baths\",\n        dataIndex: \"baths\",\n        filters: [{\n          text: \"1\",\n          value: BathroomsKind.ONE_BATH\n        }, {\n          text: \"2\",\n          value: BathroomsKind.TWO_BATH\n        }, {\n          text: \"3\",\n          value: BathroomsKind.THREE_BATH\n        }],\n        sorter: (a, b) => a.baths - b.baths,\n        defaultFilteredValue: getDefaultNumBathrooms(),\n        onFilter: (value, record) => {\n          return record.baths.toString().indexOf(value.toString()) === 0;\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 250,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Column, {\n        title: \"Price\",\n        dataIndex: \"price\",\n        filters: [{\n          text: \"$0 - $1M\",\n          value: BudgetKind.ZERO\n        }, {\n          text: \"$1M - $2M\",\n          value: BudgetKind.ONE_MILLION\n        }, {\n          text: \"$2M - $3M\",\n          value: BudgetKind.TWO_MILLION\n        }, {\n          text: \"$3M - $4M\",\n          value: BudgetKind.THREE_MILLION\n        }, {\n          text: \"$4M - $5M\",\n          value: BudgetKind.FOUR_MILLION\n        }],\n        sorter: (a, b) => parseInt(a.price.replace(/,/g, \"\")) - parseInt(b.price.replace(/,/g, \"\")),\n        defaultFilteredValue: screening && getDefaultPrice(),\n        onFilter: (value, record) => {\n          return parseInt(record.price.replace(/,/g, \"\")) > value && parseInt(record.price.replace(/,/g, \"\")) < Number(value) + BudgetKind.ONE_MILLION;\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 273,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Column, {\n        title: \"Occupancy\",\n        dataIndex: \"occupancy_date\",\n        filters: [{\n          text: \"2022\",\n          value: OccupancyKind.TWO_THOUSAND_AND_TWENTY_TWO\n        }, {\n          text: \"2023\",\n          value: OccupancyKind.TWO_THOUSAND_AND_TWENTY_THREE\n        }, {\n          text: \"2024\",\n          value: OccupancyKind.TWO_THOUSAND_AND_TWENTY_FOUR\n        }],\n        sorter: (a, b) => a.occupancy_date - b.occupancy_date,\n        onFilter: (value, record) => {\n          return record.occupancy_date.toString().indexOf(value.toString()) === 0;\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 311,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 175,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(StyledLoadingDiv, {\n      children: /*#__PURE__*/_jsxDEV(Spin, {\n        indicator: loadingIcon,\n        size: \"large\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 338,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 337,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 166,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Results, \"W74g1pYoP1GaaP15QiWHZ8r6t7E=\", false, function () {\n  return [useHistory];\n});\n\n_c = Results;\nexport default Results;\n\nvar _c;\n\n$RefreshReg$(_c, \"Results\");","map":{"version":3,"sources":["/Users/farzanhaq/Desktop/PropertyPal/src/components/Results/Results.tsx"],"names":["FilterOutlined","API","graphqlOperation","Divider","message","Spin","Table","Typography","Auth","useEffect","useState","useHistory","listScreenings","listUnits","BathroomsKind","BedroomsKind","BudgetKind","OccupancyKind","SqftKind","StyledDiv","StyledLoadingDiv","StyledLoadingIcon","StyledSubtitle","StyledTitle","Column","loadingIcon","Results","units","setUnits","screening","setScreening","history","info","content","icon","duration","getUnits","getScreening","undefined","allUnits","graphql","data","items","err","console","log","attributes","email","currentAuthenticatedUser","filter","user_email","eq","screenings","query","variables","getDefaultNumBedrooms","numBedrooms","num_bedrooms","map","bedroom","BACHELOR","toString","ONE_BED","ONE_BED_PLUS_DEN","TWO_BED","TWO_BED_PLUS_DEN","getDefaultNumBathrooms","numBathrooms","num_bathrooms","bathroom","ONE_BATH","TWO_BATH","THREE_BATH","getDefaultPrice","prices","ZERO","ONE_MILLION","TWO_MILLION","THREE_MILLION","FOUR_MILLION","price","budget","cursor","pageSize","y","record","onClick","push","id","text","value","ONE_THOUSAND","TWO_THOUSAND","THREE_THOUSAND","FOUR_THOUSAND","a","b","square_ft","Number","beds","indexOf","baths","parseInt","replace","TWO_THOUSAND_AND_TWENTY_TWO","TWO_THOUSAND_AND_TWENTY_THREE","TWO_THOUSAND_AND_TWENTY_FOUR","occupancy_date"],"mappings":"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","sourcesContent":["import { FilterOutlined } from \"@ant-design/icons\";\nimport API, { graphqlOperation } from \"@aws-amplify/api\";\nimport { Divider, message, Spin, Table, Typography } from \"antd\";\nimport { Auth } from \"aws-amplify\";\nimport { useEffect, useState } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport { listScreenings, listUnits } from \"../../graphql/queries\";\nimport {\n  BathroomsKind,\n  BedroomsKind,\n  BudgetKind,\n  OccupancyKind,\n  SqftKind\n} from \"../../utils/enums\";\nimport { StyledDiv, StyledLoadingDiv } from \"../Styles/Div.style\";\nimport { StyledLoadingIcon } from \"../Styles/LoadingOutlined.style\";\nimport { StyledSubtitle, StyledTitle } from \"../Styles/Title.style\";\n\nconst { Column } = Table;\n\nconst loadingIcon = <StyledLoadingIcon spin />;\ninterface Unit {\n  id: string;\n  unit_number: number;\n  price: string;\n  beds: number;\n  baths: number;\n  square_ft: number;\n  occupancy_date: number;\n}\n\ninterface Screening {\n  id: string;\n  user_email: string;\n  buyer_experience: string;\n  buyer_purpose: string;\n  num_bedrooms: number[];\n  num_bathrooms: number[];\n  premiums: string[];\n  budget: number[];\n}\n\nconst Results = () => {\n  const [units, setUnits] = useState<Unit[]>([]);\n  const [screening, setScreening] = useState<Screening>();\n  const history = useHistory();\n\n  useEffect(() => {\n    message.info({\n      content: \"Tip: Click on the filter icon to narrow your results\",\n      icon: <FilterOutlined />,\n      duration: 5,\n    });\n\n    getUnits();\n    getScreening();\n\n    return () => {\n      setUnits([]);\n      setScreening(undefined);\n    };\n  }, []);\n\n  const getUnits = async () => {\n    try {\n      const allUnits: any = await API.graphql(graphqlOperation(listUnits));\n      setUnits(allUnits.data.listUnits.items);\n    } catch (err) {\n      console.log(\"error getting units: \" + err);\n    }\n  };\n\n  const getScreening = async () => {\n    try {\n      const {\n        attributes: { email },\n      }: { attributes: { email: string } } =\n        await Auth.currentAuthenticatedUser();\n\n      const filter: {\n        user_email: {\n          eq: string;\n        };\n      } = {\n        user_email: {\n          eq: email,\n        },\n      };\n\n      const screenings: any = await API.graphql({\n        query: listScreenings,\n        variables: { filter: filter },\n      });\n\n      setScreening(screenings.data.listScreenings.items[0]);\n    } catch (err) {\n      console.log(\"error getting screening data: \" + err);\n    }\n  };\n\n  const getDefaultNumBedrooms = () => {\n    const numBedrooms: string[] | undefined = screening?.num_bedrooms.map(\n      (bedroom: number) => {\n        switch (bedroom) {\n          case BedroomsKind.BACHELOR:\n            return BedroomsKind.BACHELOR.toString();\n          case BedroomsKind.ONE_BED:\n            return BedroomsKind.ONE_BED.toString();\n          case BedroomsKind.ONE_BED_PLUS_DEN:\n            return BedroomsKind.ONE_BED_PLUS_DEN.toString();\n          case BedroomsKind.TWO_BED:\n            return BedroomsKind.TWO_BED.toString();\n          case BedroomsKind.TWO_BED_PLUS_DEN:\n            return BedroomsKind.TWO_BED_PLUS_DEN.toString();\n          default:\n            return \"\";\n        }\n      }\n    );\n\n    return numBedrooms;\n  };\n\n  const getDefaultNumBathrooms = () => {\n    const numBathrooms: string[] | undefined = screening?.num_bathrooms.map(\n      (bathroom: number) => {\n        switch (bathroom) {\n          case BathroomsKind.ONE_BATH:\n            return BathroomsKind.ONE_BATH.toString();\n          case BathroomsKind.TWO_BATH:\n            return BathroomsKind.TWO_BATH.toString();\n          case BathroomsKind.THREE_BATH:\n            return BathroomsKind.THREE_BATH.toString();\n          default:\n            return \"\";\n        }\n      }\n    );\n\n    return numBathrooms;\n  };\n\n  const getDefaultPrice = () => {\n    const prices: string[] | undefined = screening\n      ? [\n          BudgetKind.ZERO,\n          BudgetKind.ONE_MILLION,\n          BudgetKind.TWO_MILLION,\n          BudgetKind.THREE_MILLION,\n          BudgetKind.FOUR_MILLION,\n        ]\n          .filter((price) => {\n            return (\n              price >= screening?.budget[0] && price < screening?.budget[1]\n            );\n          })\n          .map((price) => {\n            return price.toString();\n          })\n      : undefined;\n\n    return prices;\n  };\n\n  return (\n    <StyledDiv>\n      <Typography>\n        <StyledTitle level={2}>Property Finder</StyledTitle>\n        <StyledSubtitle level={5} type=\"secondary\">\n          A list of our available properties\n        </StyledSubtitle>\n      </Typography>\n      <Divider />\n      {screening ? (\n        <Table<Unit>\n          style={{ cursor: \"pointer\" }}\n          dataSource={units}\n          pagination={{ pageSize: 25 }}\n          scroll={{ y: 350 }}\n          onRow={(record) => {\n            return {\n              onClick: () => history.push(`result/${record.id}`),\n            };\n          }}\n        >\n          <Column<Unit> title=\"Unit\" dataIndex=\"unit_number\" />\n          <Column<Unit>\n            title=\"SQFT\"\n            dataIndex=\"square_ft\"\n            filters={[\n              {\n                text: \"0 - 1K\",\n                value: SqftKind.ZERO,\n              },\n              {\n                text: \"1K - 2K\",\n                value: SqftKind.ONE_THOUSAND,\n              },\n              {\n                text: \"2K - 3K\",\n                value: SqftKind.TWO_THOUSAND,\n              },\n              {\n                text: \"3K - 4K\",\n                value: SqftKind.THREE_THOUSAND,\n              },\n              {\n                text: \"4K - 5K\",\n                value: SqftKind.FOUR_THOUSAND,\n              },\n            ]}\n            sorter={(a, b) => a.square_ft - b.square_ft}\n            onFilter={(value, record) => {\n              return (\n                record.square_ft >= value &&\n                record.square_ft < Number(value) + 1000\n              );\n            }}\n          />\n          <Column<Unit>\n            title=\"Beds\"\n            dataIndex=\"beds\"\n            filters={[\n              {\n                text: \"Bachelor\",\n                value: BedroomsKind.BACHELOR,\n              },\n              {\n                text: \"1\",\n                value: BedroomsKind.ONE_BED,\n              },\n              {\n                text: \"1 + Den\",\n                value: BedroomsKind.ONE_BED_PLUS_DEN,\n              },\n              {\n                text: \"2\",\n                value: BedroomsKind.TWO_BED,\n              },\n              {\n                text: \"2 + Den\",\n                value: BedroomsKind.TWO_BED_PLUS_DEN,\n              },\n            ]}\n            defaultFilteredValue={getDefaultNumBedrooms()}\n            onFilter={(value, record) => {\n              return record.beds.toString().indexOf(value.toString()) === 0;\n            }}\n          />\n          <Column<Unit>\n            title=\"Baths\"\n            dataIndex=\"baths\"\n            filters={[\n              {\n                text: \"1\",\n                value: BathroomsKind.ONE_BATH,\n              },\n              {\n                text: \"2\",\n                value: BathroomsKind.TWO_BATH,\n              },\n              {\n                text: \"3\",\n                value: BathroomsKind.THREE_BATH,\n              },\n            ]}\n            sorter={(a, b) => a.baths - b.baths}\n            defaultFilteredValue={getDefaultNumBathrooms()}\n            onFilter={(value, record) => {\n              return record.baths.toString().indexOf(value.toString()) === 0;\n            }}\n          />\n          <Column<Unit>\n            title=\"Price\"\n            dataIndex=\"price\"\n            filters={[\n              {\n                text: \"$0 - $1M\",\n                value: BudgetKind.ZERO,\n              },\n              {\n                text: \"$1M - $2M\",\n                value: BudgetKind.ONE_MILLION,\n              },\n              {\n                text: \"$2M - $3M\",\n                value: BudgetKind.TWO_MILLION,\n              },\n              {\n                text: \"$3M - $4M\",\n                value: BudgetKind.THREE_MILLION,\n              },\n              {\n                text: \"$4M - $5M\",\n                value: BudgetKind.FOUR_MILLION,\n              },\n            ]}\n            sorter={(a, b) =>\n              parseInt(a.price.replace(/,/g, \"\")) -\n              parseInt(b.price.replace(/,/g, \"\"))\n            }\n            defaultFilteredValue={screening && getDefaultPrice()}\n            onFilter={(value, record) => {\n              return (\n                parseInt(record.price.replace(/,/g, \"\")) > value &&\n                parseInt(record.price.replace(/,/g, \"\")) <\n                  Number(value) + BudgetKind.ONE_MILLION\n              );\n            }}\n          />\n          <Column<Unit>\n            title=\"Occupancy\"\n            dataIndex=\"occupancy_date\"\n            filters={[\n              {\n                text: \"2022\",\n                value: OccupancyKind.TWO_THOUSAND_AND_TWENTY_TWO,\n              },\n              {\n                text: \"2023\",\n                value: OccupancyKind.TWO_THOUSAND_AND_TWENTY_THREE,\n              },\n              {\n                text: \"2024\",\n                value: OccupancyKind.TWO_THOUSAND_AND_TWENTY_FOUR,\n              },\n            ]}\n            sorter={(a, b) => a.occupancy_date - b.occupancy_date}\n            onFilter={(value, record) => {\n              return (\n                record.occupancy_date.toString().indexOf(value.toString()) === 0\n              );\n            }}\n          />\n        </Table>\n      ) : (\n        <StyledLoadingDiv>\n          <Spin indicator={loadingIcon} size=\"large\" />\n        </StyledLoadingDiv>\n      )}\n    </StyledDiv>\n  );\n};\n\nexport default Results;\n"]},"metadata":{},"sourceType":"module"}