{"ast":null,"code":"var _jsxFileName = \"/Users/farzanhaq/Desktop/PropertyPal/src/components/Results/Results.tsx\",\n    _s = $RefreshSig$();\n\nimport { FilterOutlined } from \"@ant-design/icons\";\nimport { Divider, Table, Typography, message } from \"antd\";\nimport { FormContext } from \"../../utils/FormState\";\nimport { useContext, useEffect, useState } from \"react\";\nimport { BathroomsKind, BedroomsKind, BudgetKind, OccupancyKind, SqftKind } from \"../../utils/enums\";\nimport { useHistory } from \"react-router-dom\";\nimport { StyledSubtitle, StyledTitle } from \"../Styles/Title.style\";\nimport { StyledDiv } from \"../Styles/Div.style\";\nimport API, { graphqlOperation } from \"@aws-amplify/api\";\nimport { listUnits } from \"../../graphql/queries\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst {\n  Column\n} = Table;\nconst units = [{\n  id: \"1\",\n  unit: 1,\n  price: \"2500000\".toString().replace(new RegExp(/\\B(?=(\\d{3})+(?!\\d))/g), \",\"),\n  sqft: 1500,\n  beds: 2,\n  baths: 2,\n  occupancy: 2022\n}, {\n  id: \"2\",\n  unit: 2,\n  price: \"3500000\".replace(new RegExp(/\\B(?=(\\d{3})+(?!\\d))/g), \",\"),\n  sqft: 2500,\n  beds: 2,\n  baths: 3,\n  occupancy: 2023\n}, {\n  id: \"3\",\n  unit: 3,\n  price: \"500000\".replace(new RegExp(/\\B(?=(\\d{3})+(?!\\d))/g), \",\"),\n  sqft: 1250,\n  beds: 1,\n  baths: 1,\n  occupancy: 2024\n}];\n\nconst Results = () => {\n  _s();\n\n  const [filteredUnits, setFilteredUnits] = useState([]);\n  const {\n    formState\n  } = useContext(FormContext);\n  const history = useHistory();\n  useEffect(() => {\n    message.info({\n      content: \"Tip: Click on the filter icon to narrow your results\",\n      icon: /*#__PURE__*/_jsxDEV(FilterOutlined, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 13\n      }, this),\n      duration: 5\n    });\n    getUnits();\n  }, []);\n\n  const getUnits = async () => {\n    try {\n      const units = await API.graphql(graphqlOperation(listUnits));\n      setFilteredUnits(units.data.listUnits.items);\n    } catch (err) {\n      console.log(err);\n    }\n  };\n\n  const getDefaultNumBedrooms = () => {\n    const numBedrooms = formState.numBedrooms.map(bedroom => {\n      switch (bedroom) {\n        case BedroomsKind.BACHELOR:\n          return BedroomsKind.BACHELOR.toString();\n\n        case BedroomsKind.ONE_BED:\n          return BedroomsKind.ONE_BED.toString();\n\n        case BedroomsKind.ONE_BED_PLUS_DEN:\n          return BedroomsKind.ONE_BED_PLUS_DEN.toString();\n\n        case BedroomsKind.TWO_BED:\n          return BedroomsKind.TWO_BED.toString();\n\n        case BedroomsKind.TWO_BED_PLUS_DEN:\n          return BedroomsKind.TWO_BED_PLUS_DEN.toString();\n\n        default:\n          return \"\";\n      }\n    });\n    return numBedrooms;\n  };\n\n  const getDefaultNumBathrooms = () => {\n    const numBathrooms = formState.numBathrooms.map(bathroom => {\n      switch (bathroom) {\n        case BathroomsKind.ONE_BATH:\n          return BathroomsKind.ONE_BATH.toString();\n\n        case BathroomsKind.TWO_BATH:\n          return BathroomsKind.TWO_BATH.toString();\n\n        case BathroomsKind.THREE_BATH:\n          return BathroomsKind.THREE_BATH.toString();\n\n        default:\n          return \"\";\n      }\n    });\n    return numBathrooms;\n  };\n\n  const getDefaultPrice = () => {\n    const prices = [BudgetKind.ZERO, BudgetKind.ONE_MILLION, BudgetKind.TWO_MILLION, BudgetKind.THREE_MILLION, BudgetKind.FOUR_MILLION].filter(price => {\n      return price >= formState.budget[0] && price < formState.budget[1];\n    }).map(price => {\n      return price.toString();\n    });\n    return prices;\n  };\n\n  console.log(filteredUnits);\n  return /*#__PURE__*/_jsxDEV(StyledDiv, {\n    children: [/*#__PURE__*/_jsxDEV(Typography, {\n      children: [/*#__PURE__*/_jsxDEV(StyledTitle, {\n        level: 2,\n        children: \"Property Finder\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(StyledSubtitle, {\n        level: 5,\n        type: \"secondary\",\n        children: \"A list of our available properties\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Divider, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Table, {\n      style: {\n        cursor: \"pointer\"\n      },\n      dataSource: filteredUnits,\n      pagination: {\n        pageSize: 25\n      },\n      scroll: {\n        y: 350\n      },\n      onRow: record => {\n        return {\n          onClick: () => history.push(\"result\")\n        };\n      },\n      children: [/*#__PURE__*/_jsxDEV(Column, {\n        title: \"Unit\",\n        dataIndex: \"unit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 161,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Column, {\n        title: \"SQFT\",\n        dataIndex: \"sqft\",\n        filters: [{\n          text: \"0 - 1K\",\n          value: SqftKind.ZERO\n        }, {\n          text: \"1K - 2K\",\n          value: SqftKind.ONE_THOUSAND\n        }, {\n          text: \"2K - 3K\",\n          value: SqftKind.TWO_THOUSAND\n        }, {\n          text: \"3K - 4K\",\n          value: SqftKind.THREE_THOUSAND\n        }, {\n          text: \"4K - 5K\",\n          value: SqftKind.FOUR_THOUSAND\n        }],\n        sorter: (a, b) => a.sqft - b.sqft,\n        onFilter: (value, record) => {\n          return record.sqft >= value && record.sqft < Number(value) + 1000;\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 162,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Column, {\n        title: \"Beds\",\n        dataIndex: \"beds\",\n        filters: [{\n          text: \"Bachelor\",\n          value: BedroomsKind.BACHELOR\n        }, {\n          text: \"1\",\n          value: BedroomsKind.ONE_BED\n        }, {\n          text: \"1 + Den\",\n          value: BedroomsKind.ONE_BED_PLUS_DEN\n        }, {\n          text: \"2\",\n          value: BedroomsKind.TWO_BED\n        }, {\n          text: \"2 + Den\",\n          value: BedroomsKind.TWO_BED_PLUS_DEN\n        }],\n        sorter: (a, b) => a.beds - b.beds,\n        defaultFilteredValue: getDefaultNumBedrooms(),\n        onFilter: (value, record) => {\n          return record.beds.toString().indexOf(value.toString()) === 0;\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 192,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Column, {\n        title: \"Baths\",\n        dataIndex: \"baths\",\n        filters: [{\n          text: \"1\",\n          value: BathroomsKind.ONE_BATH\n        }, {\n          text: \"2\",\n          value: BathroomsKind.TWO_BATH\n        }, {\n          text: \"3\",\n          value: BathroomsKind.THREE_BATH\n        }],\n        sorter: (a, b) => a.baths - b.baths,\n        defaultFilteredValue: getDefaultNumBathrooms(),\n        onFilter: (value, record) => {\n          return record.baths.toString().indexOf(value.toString()) === 0;\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 223,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Column, {\n        title: \"Price\",\n        dataIndex: \"price\",\n        filters: [{\n          text: \"$0 - $1M\",\n          value: BudgetKind.ZERO\n        }, {\n          text: \"$1M - $2M\",\n          value: BudgetKind.ONE_MILLION\n        }, {\n          text: \"$2M - $3M\",\n          value: BudgetKind.TWO_MILLION\n        }, {\n          text: \"$3M - $4M\",\n          value: BudgetKind.THREE_MILLION\n        }, {\n          text: \"$4M - $5M\",\n          value: BudgetKind.FOUR_MILLION\n        }],\n        sorter: (a, b) => parseInt(a.price.replace(/,/g, \"\")) - parseInt(b.price.replace(/,/g, \"\")),\n        defaultFilteredValue: getDefaultPrice(),\n        onFilter: (value, record) => {\n          return parseInt(record.price) > value && parseInt(record.price) < Number(value) + BudgetKind.ONE_MILLION;\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 246,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Column, {\n        title: \"Occupancy\",\n        dataIndex: \"occupancy\",\n        filters: [{\n          text: \"2022\",\n          value: OccupancyKind.TWO_THOUSAND_AND_TWENTY_TWO\n        }, {\n          text: \"2023\",\n          value: OccupancyKind.TWO_THOUSAND_AND_TWENTY_THREE\n        }, {\n          text: \"2024\",\n          value: OccupancyKind.TWO_THOUSAND_AND_TWENTY_FOUR\n        }],\n        sorter: (a, b) => a.occupancy - b.occupancy\n      }, \"occupancy\", false, {\n        fileName: _jsxFileName,\n        lineNumber: 284,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 142,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Results, \"u74doAZSPDgWPG+h8ZT0ZUhoaYc=\", false, function () {\n  return [useHistory];\n});\n\n_c = Results;\nexport default Results;\n\nvar _c;\n\n$RefreshReg$(_c, \"Results\");","map":{"version":3,"sources":["/Users/farzanhaq/Desktop/PropertyPal/src/components/Results/Results.tsx"],"names":["FilterOutlined","Divider","Table","Typography","message","FormContext","useContext","useEffect","useState","BathroomsKind","BedroomsKind","BudgetKind","OccupancyKind","SqftKind","useHistory","StyledSubtitle","StyledTitle","StyledDiv","API","graphqlOperation","listUnits","Column","units","id","unit","price","toString","replace","RegExp","sqft","beds","baths","occupancy","Results","filteredUnits","setFilteredUnits","formState","history","info","content","icon","duration","getUnits","graphql","data","items","err","console","log","getDefaultNumBedrooms","numBedrooms","map","bedroom","BACHELOR","ONE_BED","ONE_BED_PLUS_DEN","TWO_BED","TWO_BED_PLUS_DEN","getDefaultNumBathrooms","numBathrooms","bathroom","ONE_BATH","TWO_BATH","THREE_BATH","getDefaultPrice","prices","ZERO","ONE_MILLION","TWO_MILLION","THREE_MILLION","FOUR_MILLION","filter","budget","cursor","pageSize","y","record","onClick","push","text","value","ONE_THOUSAND","TWO_THOUSAND","THREE_THOUSAND","FOUR_THOUSAND","a","b","Number","indexOf","parseInt","TWO_THOUSAND_AND_TWENTY_TWO","TWO_THOUSAND_AND_TWENTY_THREE","TWO_THOUSAND_AND_TWENTY_FOUR"],"mappings":"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","sourcesContent":["import { FilterOutlined } from \"@ant-design/icons\";\nimport { Divider, Table, Typography, message } from \"antd\";\nimport { FormContext } from \"../../utils/FormState\";\nimport { useContext, useEffect, useState } from \"react\";\nimport {\n  BathroomsKind,\n  BedroomsKind,\n  BudgetKind,\n  OccupancyKind,\n  SqftKind,\n} from \"../../utils/enums\";\nimport { useHistory } from \"react-router-dom\";\nimport { StyledSubtitle, StyledTitle } from \"../Styles/Title.style\";\nimport { StyledDiv } from \"../Styles/Div.style\";\nimport API, { graphqlOperation } from \"@aws-amplify/api\";\nimport { listUnits } from \"../../graphql/queries\";\n\nconst { Column } = Table;\ninterface Unit {\n  id: string;\n  unit: number;\n  price: string;\n  sqft: number;\n  beds: number;\n  baths: number;\n  occupancy: number;\n}\n\nconst units: Unit[] = [\n  {\n    id: \"1\",\n    unit: 1,\n    price: \"2500000\".toString().replace(new RegExp(/\\B(?=(\\d{3})+(?!\\d))/g), \",\"),\n    sqft: 1500,\n    beds: 2,\n    baths: 2,\n    occupancy: 2022,\n  },\n  {\n    id: \"2\",\n    unit: 2,\n    price: \"3500000\".replace(new RegExp(/\\B(?=(\\d{3})+(?!\\d))/g), \",\"),\n    sqft: 2500,\n    beds: 2,\n    baths: 3,\n    occupancy: 2023,\n  },\n  {\n    id: \"3\",\n    unit: 3,\n    price: \"500000\".replace(new RegExp(/\\B(?=(\\d{3})+(?!\\d))/g), \",\"),\n    sqft: 1250,\n    beds: 1,\n    baths: 1,\n    occupancy: 2024,\n  },\n];\n\nconst Results = () => {\n  const [filteredUnits, setFilteredUnits] = useState([]);\n  const { formState } = useContext(FormContext);\n  const history = useHistory();\n\n  useEffect(() => {\n    message.info({\n      content: \"Tip: Click on the filter icon to narrow your results\",\n      icon: <FilterOutlined />,\n      duration: 5,\n    });\n\n    getUnits();\n  }, []);\n\n  const getUnits = async () => {\n    try {\n      const units: any = await API.graphql(graphqlOperation(listUnits));\n      setFilteredUnits(units.data.listUnits.items);\n    } catch (err) {\n      console.log(err);\n    }\n  };\n\n  const getDefaultNumBedrooms = () => {\n    const numBedrooms = formState.numBedrooms.map((bedroom: number) => {\n      switch (bedroom) {\n        case BedroomsKind.BACHELOR:\n          return BedroomsKind.BACHELOR.toString();\n        case BedroomsKind.ONE_BED:\n          return BedroomsKind.ONE_BED.toString();\n        case BedroomsKind.ONE_BED_PLUS_DEN:\n          return BedroomsKind.ONE_BED_PLUS_DEN.toString();\n        case BedroomsKind.TWO_BED:\n          return BedroomsKind.TWO_BED.toString();\n        case BedroomsKind.TWO_BED_PLUS_DEN:\n          return BedroomsKind.TWO_BED_PLUS_DEN.toString();\n        default:\n          return \"\";\n      }\n    });\n\n    return numBedrooms;\n  };\n\n  const getDefaultNumBathrooms = () => {\n    const numBathrooms = formState.numBathrooms.map((bathroom: number) => {\n      switch (bathroom) {\n        case BathroomsKind.ONE_BATH:\n          return BathroomsKind.ONE_BATH.toString();\n        case BathroomsKind.TWO_BATH:\n          return BathroomsKind.TWO_BATH.toString();\n        case BathroomsKind.THREE_BATH:\n          return BathroomsKind.THREE_BATH.toString();\n        default:\n          return \"\";\n      }\n    });\n\n    return numBathrooms;\n  };\n\n  const getDefaultPrice = () => {\n    const prices = [\n      BudgetKind.ZERO,\n      BudgetKind.ONE_MILLION,\n      BudgetKind.TWO_MILLION,\n      BudgetKind.THREE_MILLION,\n      BudgetKind.FOUR_MILLION,\n    ]\n      .filter((price) => {\n        return price >= formState.budget[0] && price < formState.budget[1];\n      })\n      .map((price) => {\n        return price.toString();\n      });\n\n    return prices;\n  };\n\n  console.log(filteredUnits);\n\n  return (\n    <StyledDiv>\n      <Typography>\n        <StyledTitle level={2}>Property Finder</StyledTitle>\n        <StyledSubtitle level={5} type=\"secondary\">\n          A list of our available properties\n        </StyledSubtitle>\n      </Typography>\n      <Divider />\n      <Table<Unit>\n        style={{ cursor: \"pointer\" }}\n        dataSource={filteredUnits}\n        pagination={{ pageSize: 25 }}\n        scroll={{ y: 350 }}\n        onRow={(record) => {\n          return {\n            onClick: () => history.push(\"result\"),\n          };\n        }}\n      >\n        <Column<Unit> title=\"Unit\" dataIndex=\"unit\" />\n        <Column<Unit>\n          title=\"SQFT\"\n          dataIndex=\"sqft\"\n          filters={[\n            {\n              text: \"0 - 1K\",\n              value: SqftKind.ZERO,\n            },\n            {\n              text: \"1K - 2K\",\n              value: SqftKind.ONE_THOUSAND,\n            },\n            {\n              text: \"2K - 3K\",\n              value: SqftKind.TWO_THOUSAND,\n            },\n            {\n              text: \"3K - 4K\",\n              value: SqftKind.THREE_THOUSAND,\n            },\n            {\n              text: \"4K - 5K\",\n              value: SqftKind.FOUR_THOUSAND,\n            },\n          ]}\n          sorter={(a, b) => a.sqft - b.sqft}\n          onFilter={(value, record) => {\n            return record.sqft >= value && record.sqft < Number(value) + 1000;\n          }}\n        />\n        <Column<Unit>\n          title=\"Beds\"\n          dataIndex=\"beds\"\n          filters={[\n            {\n              text: \"Bachelor\",\n              value: BedroomsKind.BACHELOR,\n            },\n            {\n              text: \"1\",\n              value: BedroomsKind.ONE_BED,\n            },\n            {\n              text: \"1 + Den\",\n              value: BedroomsKind.ONE_BED_PLUS_DEN,\n            },\n            {\n              text: \"2\",\n              value: BedroomsKind.TWO_BED,\n            },\n            {\n              text: \"2 + Den\",\n              value: BedroomsKind.TWO_BED_PLUS_DEN,\n            },\n          ]}\n          sorter={(a, b) => a.beds - b.beds}\n          defaultFilteredValue={getDefaultNumBedrooms()}\n          onFilter={(value, record) => {\n            return record.beds.toString().indexOf(value.toString()) === 0;\n          }}\n        />\n        <Column<Unit>\n          title=\"Baths\"\n          dataIndex=\"baths\"\n          filters={[\n            {\n              text: \"1\",\n              value: BathroomsKind.ONE_BATH,\n            },\n            {\n              text: \"2\",\n              value: BathroomsKind.TWO_BATH,\n            },\n            {\n              text: \"3\",\n              value: BathroomsKind.THREE_BATH,\n            },\n          ]}\n          sorter={(a, b) => a.baths - b.baths}\n          defaultFilteredValue={getDefaultNumBathrooms()}\n          onFilter={(value, record) => {\n            return record.baths.toString().indexOf(value.toString()) === 0;\n          }}\n        />\n        <Column<Unit>\n          title=\"Price\"\n          dataIndex=\"price\"\n          filters={[\n            {\n              text: \"$0 - $1M\",\n              value: BudgetKind.ZERO,\n            },\n            {\n              text: \"$1M - $2M\",\n              value: BudgetKind.ONE_MILLION,\n            },\n            {\n              text: \"$2M - $3M\",\n              value: BudgetKind.TWO_MILLION,\n            },\n            {\n              text: \"$3M - $4M\",\n              value: BudgetKind.THREE_MILLION,\n            },\n            {\n              text: \"$4M - $5M\",\n              value: BudgetKind.FOUR_MILLION,\n            },\n          ]}\n          sorter={(a, b) =>\n            parseInt(a.price.replace(/,/g, \"\")) -\n            parseInt(b.price.replace(/,/g, \"\"))\n          }\n          defaultFilteredValue={getDefaultPrice()}\n          onFilter={(value, record) => {\n            return (\n              parseInt(record.price) > value &&\n              parseInt(record.price) <\n                Number(value) + BudgetKind.ONE_MILLION\n            );\n          }}\n        />\n        <Column<Unit>\n          key=\"occupancy\"\n          title=\"Occupancy\"\n          dataIndex=\"occupancy\"\n          filters={[\n            {\n              text: \"2022\",\n              value: OccupancyKind.TWO_THOUSAND_AND_TWENTY_TWO,\n            },\n            {\n              text: \"2023\",\n              value: OccupancyKind.TWO_THOUSAND_AND_TWENTY_THREE,\n            },\n            {\n              text: \"2024\",\n              value: OccupancyKind.TWO_THOUSAND_AND_TWENTY_FOUR,\n            },\n          ]}\n          sorter={(a, b) => a.occupancy - b.occupancy}\n        />\n      </Table>\n    </StyledDiv>\n  );\n};\n\nexport default Results;\n"]},"metadata":{},"sourceType":"module"}