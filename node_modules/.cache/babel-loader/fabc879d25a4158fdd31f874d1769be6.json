{"ast":null,"code":"var _jsxFileName = \"/Users/farzanhaq/Desktop/PropertyPal/src/components/Results/Results.tsx\",\n    _s = $RefreshSig$();\n\nimport { FilterOutlined } from \"@ant-design/icons\";\nimport { Divider, Table, Typography, message, Button } from \"antd\";\nimport { FormContext } from \"../../utils/FormState\";\nimport { useContext, useEffect, useState } from \"react\";\nimport { BathroomsKind, BedroomsKind, BudgetKind, OccupancyKind, SqftKind } from \"../../utils/enums\";\nimport { useHistory } from \"react-router-dom\";\nimport { StyledSubtitle, StyledTitle } from \"../Styles/Title.style\";\nimport { StyledDiv } from \"../Styles/Div.style\";\nimport API, { graphqlOperation } from \"@aws-amplify/api\";\nimport { listScreenings, listUnits } from \"../../graphql/queries\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst {\n  Column\n} = Table;\n\nconst Results = () => {\n  _s();\n\n  const [units, setUnits] = useState([]);\n  const [screening, setScreening] = useState();\n  const [isFiltered, setIsFiltered] = useState(true);\n  const [filteredBeds, setFilteredBeds] = useState([\"\"]);\n  const {\n    formState\n  } = useContext(FormContext);\n  const history = useHistory();\n  useEffect(() => {\n    message.info({\n      content: \"Tip: Click on the filter icon to narrow your results\",\n      icon: /*#__PURE__*/_jsxDEV(FilterOutlined, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 13\n      }, this),\n      duration: 5\n    });\n    getUnits();\n    getScreening();\n  }, []);\n  useEffect(() => {\n    if (isFiltered == false) {\n      setIsFiltered(true);\n    }\n  }, [isFiltered]);\n\n  const getUnits = async () => {\n    try {\n      const allUnits = await API.graphql(graphqlOperation(listUnits));\n      setUnits(allUnits.data.listUnits.items);\n    } catch (err) {\n      console.log(\"error getting units: \" + err);\n    }\n  };\n\n  const getScreening = async () => {\n    try {\n      const screeningData = await API.graphql(graphqlOperation(listScreenings));\n      setScreening(screeningData.data.listScreenings.items[0]);\n    } catch (err) {\n      console.log(\"error getting screening data: \" + err);\n    }\n  };\n\n  const getDefaultNumBedrooms = () => {\n    const numBedrooms = screening === null || screening === void 0 ? void 0 : screening.num_bedrooms.map(bedroom => {\n      switch (bedroom) {\n        case BedroomsKind.BACHELOR:\n          return BedroomsKind.BACHELOR.toString();\n\n        case BedroomsKind.ONE_BED:\n          return BedroomsKind.ONE_BED.toString();\n\n        case BedroomsKind.ONE_BED_PLUS_DEN:\n          return BedroomsKind.ONE_BED_PLUS_DEN.toString();\n\n        case BedroomsKind.TWO_BED:\n          return BedroomsKind.TWO_BED.toString();\n\n        case BedroomsKind.TWO_BED_PLUS_DEN:\n          return BedroomsKind.TWO_BED_PLUS_DEN.toString();\n\n        default:\n          return \"\";\n      }\n    });\n    return numBedrooms;\n  };\n\n  const getDefaultNumBathrooms = () => {\n    const numBathrooms = screening === null || screening === void 0 ? void 0 : screening.num_bathrooms.map(bathroom => {\n      switch (bathroom) {\n        case BathroomsKind.ONE_BATH:\n          return BathroomsKind.ONE_BATH.toString();\n\n        case BathroomsKind.TWO_BATH:\n          return BathroomsKind.TWO_BATH.toString();\n\n        case BathroomsKind.THREE_BATH:\n          return BathroomsKind.THREE_BATH.toString();\n\n        default:\n          return \"\";\n      }\n    });\n    return numBathrooms;\n  };\n\n  const getDefaultPrice = () => {\n    const prices = [BudgetKind.ZERO, BudgetKind.ONE_MILLION, BudgetKind.TWO_MILLION, BudgetKind.THREE_MILLION, BudgetKind.FOUR_MILLION].filter(price => {\n      return price >= formState.budget[0] && price < formState.budget[1];\n    }).map(price => {\n      return price.toString();\n    });\n    return prices;\n  };\n\n  const clearFilters = () => {\n    setIsFiltered(false);\n  };\n\n  console.log(isFiltered);\n  return /*#__PURE__*/_jsxDEV(StyledDiv, {\n    children: [/*#__PURE__*/_jsxDEV(Typography, {\n      children: [/*#__PURE__*/_jsxDEV(StyledTitle, {\n        level: 2,\n        children: \"Property Finder\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 160,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(StyledSubtitle, {\n        level: 5,\n        type: \"secondary\",\n        children: \"A list of our available properties\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 161,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 159,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Divider, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 165,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      type: \"primary\",\n      onClick: () => clearFilters(),\n      children: \"Clear Filters\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 166,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Table, {\n      style: {\n        cursor: \"pointer\"\n      },\n      dataSource: units,\n      pagination: {\n        pageSize: 25\n      },\n      scroll: {\n        y: 350\n      },\n      loading: screening ? false : true,\n      onRow: record => {\n        return {\n          onClick: () => history.push(`result/${record.id}`)\n        };\n      },\n      children: [/*#__PURE__*/_jsxDEV(Column, {\n        title: \"Unit\",\n        dataIndex: \"unit_number\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 181,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Column, {\n        title: \"SQFT\",\n        dataIndex: \"square_ft\",\n        filters: [{\n          text: \"0 - 1K\",\n          value: SqftKind.ZERO\n        }, {\n          text: \"1K - 2K\",\n          value: SqftKind.ONE_THOUSAND\n        }, {\n          text: \"2K - 3K\",\n          value: SqftKind.TWO_THOUSAND\n        }, {\n          text: \"3K - 4K\",\n          value: SqftKind.THREE_THOUSAND\n        }, {\n          text: \"4K - 5K\",\n          value: SqftKind.FOUR_THOUSAND\n        }],\n        sorter: (a, b) => a.square_ft - b.square_ft,\n        onFilter: (value, record) => {\n          return record.square_ft >= value && record.square_ft < Number(value) + 1000;\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 182,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Column, {\n        title: \"Beds\",\n        dataIndex: \"beds\",\n        filters: [{\n          text: \"Bachelor\",\n          value: BedroomsKind.BACHELOR\n        }, {\n          text: \"1\",\n          value: BedroomsKind.ONE_BED\n        }, {\n          text: \"1 + Den\",\n          value: BedroomsKind.ONE_BED_PLUS_DEN\n        }, {\n          text: \"2\",\n          value: BedroomsKind.TWO_BED\n        }, {\n          text: \"2 + Den\",\n          value: BedroomsKind.TWO_BED_PLUS_DEN\n        }],\n        defaultFilteredValue: getDefaultNumBedrooms(),\n        filteredValue: isFiltered ? undefined : null,\n        onFilter: (value, record) => {\n          //const newFilteredBeds: string[] = filteredBeds.push(value.toString())\n          //setFilteredBeds(newFilteredBeds)\n          setIsFiltered(true);\n          console.log(isFiltered);\n          return record.beds.toString().indexOf(value.toString()) === 0;\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 215,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Column, {\n        title: \"Baths\",\n        dataIndex: \"baths\",\n        filters: [{\n          text: \"1\",\n          value: BathroomsKind.ONE_BATH\n        }, {\n          text: \"2\",\n          value: BathroomsKind.TWO_BATH\n        }, {\n          text: \"3\",\n          value: BathroomsKind.THREE_BATH\n        }],\n        sorter: (a, b) => a.baths - b.baths,\n        defaultFilteredValue: getDefaultNumBathrooms(),\n        onFilter: (value, record) => {\n          return record.baths.toString().indexOf(value.toString()) === 0;\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 250,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Column, {\n        title: \"Price\",\n        dataIndex: \"price\",\n        filters: [{\n          text: \"$0 - $1M\",\n          value: BudgetKind.ZERO\n        }, {\n          text: \"$1M - $2M\",\n          value: BudgetKind.ONE_MILLION\n        }, {\n          text: \"$2M - $3M\",\n          value: BudgetKind.TWO_MILLION\n        }, {\n          text: \"$3M - $4M\",\n          value: BudgetKind.THREE_MILLION\n        }, {\n          text: \"$4M - $5M\",\n          value: BudgetKind.FOUR_MILLION\n        }],\n        sorter: (a, b) => parseInt(a.price.replace(/,/g, \"\")) - parseInt(b.price.replace(/,/g, \"\")),\n        defaultFilteredValue: getDefaultPrice(),\n        onFilter: (value, record) => {\n          return parseInt(record.price.replace(/,/g, \"\")) > value && parseInt(record.price.replace(/,/g, \"\")) < Number(value) + BudgetKind.ONE_MILLION;\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 273,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Column, {\n        title: \"Occupancy\",\n        dataIndex: \"occupancy_date\",\n        filters: [{\n          text: \"2022\",\n          value: OccupancyKind.TWO_THOUSAND_AND_TWENTY_TWO\n        }, {\n          text: \"2023\",\n          value: OccupancyKind.TWO_THOUSAND_AND_TWENTY_THREE\n        }, {\n          text: \"2024\",\n          value: OccupancyKind.TWO_THOUSAND_AND_TWENTY_FOUR\n        }],\n        sorter: (a, b) => a.occupancy_date - b.occupancy_date,\n        onFilter: (value, record) => {\n          return record.occupancy_date.toString().indexOf(value.toString()) === 0;\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 311,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 169,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 158,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Results, \"fAMw3qD4ofHPIU9KM6J1wmSBPeI=\", false, function () {\n  return [useHistory];\n});\n\n_c = Results;\nexport default Results;\n\nvar _c;\n\n$RefreshReg$(_c, \"Results\");","map":{"version":3,"sources":["/Users/farzanhaq/Desktop/PropertyPal/src/components/Results/Results.tsx"],"names":["FilterOutlined","Divider","Table","Typography","message","Button","FormContext","useContext","useEffect","useState","BathroomsKind","BedroomsKind","BudgetKind","OccupancyKind","SqftKind","useHistory","StyledSubtitle","StyledTitle","StyledDiv","API","graphqlOperation","listScreenings","listUnits","Column","Results","units","setUnits","screening","setScreening","isFiltered","setIsFiltered","filteredBeds","setFilteredBeds","formState","history","info","content","icon","duration","getUnits","getScreening","allUnits","graphql","data","items","err","console","log","screeningData","getDefaultNumBedrooms","numBedrooms","num_bedrooms","map","bedroom","BACHELOR","toString","ONE_BED","ONE_BED_PLUS_DEN","TWO_BED","TWO_BED_PLUS_DEN","getDefaultNumBathrooms","numBathrooms","num_bathrooms","bathroom","ONE_BATH","TWO_BATH","THREE_BATH","getDefaultPrice","prices","ZERO","ONE_MILLION","TWO_MILLION","THREE_MILLION","FOUR_MILLION","filter","price","budget","clearFilters","cursor","pageSize","y","record","onClick","push","id","text","value","ONE_THOUSAND","TWO_THOUSAND","THREE_THOUSAND","FOUR_THOUSAND","a","b","square_ft","Number","undefined","beds","indexOf","baths","parseInt","replace","TWO_THOUSAND_AND_TWENTY_TWO","TWO_THOUSAND_AND_TWENTY_THREE","TWO_THOUSAND_AND_TWENTY_FOUR","occupancy_date"],"mappings":"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","sourcesContent":["import { FilterOutlined } from \"@ant-design/icons\";\nimport {\n  Divider,\n  Table,\n  Typography,\n  message,\n  Spin,\n  Switch,\n  Button,\n} from \"antd\";\nimport { FormContext } from \"../../utils/FormState\";\nimport { SetStateAction, useContext, useEffect, useState } from \"react\";\nimport {\n  BathroomsKind,\n  BedroomsKind,\n  BudgetKind,\n  OccupancyKind,\n  SqftKind,\n} from \"../../utils/enums\";\nimport { useHistory } from \"react-router-dom\";\nimport { StyledSubtitle, StyledTitle } from \"../Styles/Title.style\";\nimport { StyledDiv } from \"../Styles/Div.style\";\nimport API, { graphqlOperation } from \"@aws-amplify/api\";\nimport { listScreenings, listUnits } from \"../../graphql/queries\";\n\nconst { Column } = Table;\ninterface Unit {\n  id: string;\n  unit_number: number;\n  price: string;\n  beds: number;\n  baths: number;\n  square_ft: number;\n  occupancy_date: number;\n}\n\ninterface Screening {\n  id: string;\n  user_email: string;\n  buyer_experience: string;\n  buyer_purpose: string;\n  num_bedrooms: number[];\n  num_bathrooms: number[];\n  premiums: string[];\n  budget: number[];\n}\n\nconst Results = () => {\n  const [units, setUnits] = useState<Unit[]>([]);\n  const [screening, setScreening] = useState<Screening>();\n  const [isFiltered, setIsFiltered] = useState<boolean>(true);\n  const [filteredBeds, setFilteredBeds] = useState<string[]>([\"\"]);\n  const { formState } = useContext(FormContext);\n  const history = useHistory();\n\n  useEffect(() => {\n    message.info({\n      content: \"Tip: Click on the filter icon to narrow your results\",\n      icon: <FilterOutlined />,\n      duration: 5,\n    });\n\n    getUnits();\n    getScreening();\n  }, []);\n\n  useEffect(() => {\n    if (isFiltered == false) {\n      setIsFiltered(true)\n    }\n  }, [isFiltered]);\n\n  const getUnits = async () => {\n    try {\n      const allUnits: any = await API.graphql(graphqlOperation(listUnits));\n      setUnits(allUnits.data.listUnits.items);\n    } catch (err) {\n      console.log(\"error getting units: \" + err);\n    }\n  };\n\n  const getScreening = async () => {\n    try {\n      const screeningData: any = await API.graphql(\n        graphqlOperation(listScreenings)\n      );\n      setScreening(screeningData.data.listScreenings.items[0]);\n    } catch (err) {\n      console.log(\"error getting screening data: \" + err);\n    }\n  };\n\n  const getDefaultNumBedrooms = () => {\n    const numBedrooms = screening?.num_bedrooms.map((bedroom: number) => {\n      switch (bedroom) {\n        case BedroomsKind.BACHELOR:\n          return BedroomsKind.BACHELOR.toString();\n        case BedroomsKind.ONE_BED:\n          return BedroomsKind.ONE_BED.toString();\n        case BedroomsKind.ONE_BED_PLUS_DEN:\n          return BedroomsKind.ONE_BED_PLUS_DEN.toString();\n        case BedroomsKind.TWO_BED:\n          return BedroomsKind.TWO_BED.toString();\n        case BedroomsKind.TWO_BED_PLUS_DEN:\n          return BedroomsKind.TWO_BED_PLUS_DEN.toString();\n        default:\n          return \"\";\n      }\n    });\n\n    return numBedrooms;\n  };\n\n  const getDefaultNumBathrooms = () => {\n    const numBathrooms = screening?.num_bathrooms.map((bathroom: number) => {\n      switch (bathroom) {\n        case BathroomsKind.ONE_BATH:\n          return BathroomsKind.ONE_BATH.toString();\n        case BathroomsKind.TWO_BATH:\n          return BathroomsKind.TWO_BATH.toString();\n        case BathroomsKind.THREE_BATH:\n          return BathroomsKind.THREE_BATH.toString();\n        default:\n          return \"\";\n      }\n    });\n\n    return numBathrooms;\n  };\n\n  const getDefaultPrice = () => {\n    const prices = [\n      BudgetKind.ZERO,\n      BudgetKind.ONE_MILLION,\n      BudgetKind.TWO_MILLION,\n      BudgetKind.THREE_MILLION,\n      BudgetKind.FOUR_MILLION,\n    ]\n      .filter((price) => {\n        return price >= formState.budget[0] && price < formState.budget[1];\n      })\n      .map((price) => {\n        return price.toString();\n      });\n\n    return prices;\n  };\n\n  const clearFilters = () => {\n    setIsFiltered(false)\n  };\n\n  \n\n  console.log(isFiltered)\n\n  return (\n    <StyledDiv>\n      <Typography>\n        <StyledTitle level={2}>Property Finder</StyledTitle>\n        <StyledSubtitle level={5} type=\"secondary\">\n          A list of our available properties\n        </StyledSubtitle>\n      </Typography>\n      <Divider />\n      <Button type=\"primary\" onClick={() => clearFilters()}>\n        Clear Filters\n      </Button>\n      <Table<Unit>\n        style={{ cursor: \"pointer\" }}\n        dataSource={units}\n        pagination={{ pageSize: 25 }}\n        scroll={{ y: 350 }}\n        loading={screening ? false : true}\n        onRow={(record) => {\n          return {\n            onClick: () => history.push(`result/${record.id}`),\n          };\n        }}\n      >\n        <Column<Unit> title=\"Unit\" dataIndex=\"unit_number\" />\n        <Column<Unit>\n          title=\"SQFT\"\n          dataIndex=\"square_ft\"\n          filters={[\n            {\n              text: \"0 - 1K\",\n              value: SqftKind.ZERO,\n            },\n            {\n              text: \"1K - 2K\",\n              value: SqftKind.ONE_THOUSAND,\n            },\n            {\n              text: \"2K - 3K\",\n              value: SqftKind.TWO_THOUSAND,\n            },\n            {\n              text: \"3K - 4K\",\n              value: SqftKind.THREE_THOUSAND,\n            },\n            {\n              text: \"4K - 5K\",\n              value: SqftKind.FOUR_THOUSAND,\n            },\n          ]}\n          sorter={(a, b) => a.square_ft - b.square_ft}\n          onFilter={(value, record) => {\n            return (\n              record.square_ft >= value &&\n              record.square_ft < Number(value) + 1000\n            );\n          }}\n        />\n        <Column<Unit>\n          title=\"Beds\"\n          dataIndex=\"beds\"\n          filters={[\n            {\n              text: \"Bachelor\",\n              value: BedroomsKind.BACHELOR,\n            },\n            {\n              text: \"1\",\n              value: BedroomsKind.ONE_BED,\n            },\n            {\n              text: \"1 + Den\",\n              value: BedroomsKind.ONE_BED_PLUS_DEN,\n            },\n            {\n              text: \"2\",\n              value: BedroomsKind.TWO_BED,\n            },\n            {\n              text: \"2 + Den\",\n              value: BedroomsKind.TWO_BED_PLUS_DEN,\n            },\n          ]}\n          defaultFilteredValue={getDefaultNumBedrooms()}\n          filteredValue={isFiltered ? undefined : null}\n          onFilter={(value, record) => {\n            //const newFilteredBeds: string[] = filteredBeds.push(value.toString())\n            //setFilteredBeds(newFilteredBeds)\n            setIsFiltered(true)\n            console.log(isFiltered)\n            return record.beds.toString().indexOf(value.toString()) === 0;\n          }}\n        />\n        <Column<Unit>\n          title=\"Baths\"\n          dataIndex=\"baths\"\n          filters={[\n            {\n              text: \"1\",\n              value: BathroomsKind.ONE_BATH,\n            },\n            {\n              text: \"2\",\n              value: BathroomsKind.TWO_BATH,\n            },\n            {\n              text: \"3\",\n              value: BathroomsKind.THREE_BATH,\n            },\n          ]}\n          sorter={(a, b) => a.baths - b.baths}\n          defaultFilteredValue={getDefaultNumBathrooms()}\n          onFilter={(value, record) => {\n            return record.baths.toString().indexOf(value.toString()) === 0;\n          }}\n        />\n        <Column<Unit>\n          title=\"Price\"\n          dataIndex=\"price\"\n          filters={[\n            {\n              text: \"$0 - $1M\",\n              value: BudgetKind.ZERO,\n            },\n            {\n              text: \"$1M - $2M\",\n              value: BudgetKind.ONE_MILLION,\n            },\n            {\n              text: \"$2M - $3M\",\n              value: BudgetKind.TWO_MILLION,\n            },\n            {\n              text: \"$3M - $4M\",\n              value: BudgetKind.THREE_MILLION,\n            },\n            {\n              text: \"$4M - $5M\",\n              value: BudgetKind.FOUR_MILLION,\n            },\n          ]}\n          sorter={(a, b) =>\n            parseInt(a.price.replace(/,/g, \"\")) -\n            parseInt(b.price.replace(/,/g, \"\"))\n          }\n          defaultFilteredValue={getDefaultPrice()}\n          onFilter={(value, record) => {\n            return (\n              parseInt(record.price.replace(/,/g, \"\")) > value &&\n              parseInt(record.price.replace(/,/g, \"\")) <\n                Number(value) + BudgetKind.ONE_MILLION\n            );\n          }}\n        />\n        <Column<Unit>\n          title=\"Occupancy\"\n          dataIndex=\"occupancy_date\"\n          filters={[\n            {\n              text: \"2022\",\n              value: OccupancyKind.TWO_THOUSAND_AND_TWENTY_TWO,\n            },\n            {\n              text: \"2023\",\n              value: OccupancyKind.TWO_THOUSAND_AND_TWENTY_THREE,\n            },\n            {\n              text: \"2024\",\n              value: OccupancyKind.TWO_THOUSAND_AND_TWENTY_FOUR,\n            },\n          ]}\n          sorter={(a, b) => a.occupancy_date - b.occupancy_date}\n          onFilter={(value, record) => {\n            return (\n              record.occupancy_date.toString().indexOf(value.toString()) === 0\n            );\n          }}\n        />\n      </Table>\n    </StyledDiv>\n  );\n};\n\nexport default Results;\n"]},"metadata":{},"sourceType":"module"}