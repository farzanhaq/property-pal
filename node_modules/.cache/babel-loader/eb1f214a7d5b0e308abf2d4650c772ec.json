{"ast":null,"code":"var _jsxFileName = \"/Users/farzanhaq/Desktop/PropertyPal/src/components/Results/Result/ResultTable.tsx\",\n    _s = $RefreshSig$();\n\nimport { FormContext } from \"../../../utils/FormState\";\nimport Column from \"antd/lib/table/Column\";\nimport { useContext } from \"react\";\nimport { useHistory } from \"react-router\";\nimport { SqftKind, BedroomsKind, BathroomsKind, BudgetKind, OccupancyKind } from \"../../../utils/enums\";\nimport { Table } from \"antd\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst ResultTable = ({\n  screening,\n  units,\n  enableFilters\n}) => {\n  _s();\n\n  const history = useHistory();\n  const {\n    formState\n  } = useContext(FormContext);\n\n  const getDefaultNumBedrooms = () => {\n    const numBedrooms = screening === null || screening === void 0 ? void 0 : screening.num_bedrooms.map(bedroom => {\n      switch (bedroom) {\n        case BedroomsKind.BACHELOR:\n          return BedroomsKind.BACHELOR.toString();\n\n        case BedroomsKind.ONE_BED:\n          return BedroomsKind.ONE_BED.toString();\n\n        case BedroomsKind.ONE_BED_PLUS_DEN:\n          return BedroomsKind.ONE_BED_PLUS_DEN.toString();\n\n        case BedroomsKind.TWO_BED:\n          return BedroomsKind.TWO_BED.toString();\n\n        case BedroomsKind.TWO_BED_PLUS_DEN:\n          return BedroomsKind.TWO_BED_PLUS_DEN.toString();\n\n        default:\n          return \"\";\n      }\n    });\n    return numBedrooms;\n  };\n\n  const getDefaultNumBathrooms = () => {\n    const numBathrooms = screening === null || screening === void 0 ? void 0 : screening.num_bathrooms.map(bathroom => {\n      switch (bathroom) {\n        case BathroomsKind.ONE_BATH:\n          return BathroomsKind.ONE_BATH.toString();\n\n        case BathroomsKind.TWO_BATH:\n          return BathroomsKind.TWO_BATH.toString();\n\n        case BathroomsKind.THREE_BATH:\n          return BathroomsKind.THREE_BATH.toString();\n\n        default:\n          return \"\";\n      }\n    });\n    return numBathrooms;\n  };\n\n  const getDefaultPrice = () => {\n    const prices = [BudgetKind.ZERO, BudgetKind.ONE_MILLION, BudgetKind.TWO_MILLION, BudgetKind.THREE_MILLION, BudgetKind.FOUR_MILLION].filter(price => {\n      return price >= formState.budget[0] && price < formState.budget[1];\n    }).map(price => {\n      return price.toString();\n    });\n    return prices;\n  };\n\n  return /*#__PURE__*/_jsxDEV(Table, {\n    style: {\n      cursor: \"pointer\"\n    },\n    dataSource: units,\n    pagination: {\n      pageSize: 25\n    },\n    scroll: {\n      y: 350\n    },\n    loading: screening ? false : true,\n    onRow: record => {\n      return {\n        onClick: () => history.push(`result/${record.id}`)\n      };\n    },\n    children: [/*#__PURE__*/_jsxDEV(Column, {\n      title: \"Unit\",\n      dataIndex: \"unit_number\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Column, {\n      title: \"SQFT\",\n      dataIndex: \"square_ft\",\n      filters: [{\n        text: \"0 - 1K\",\n        value: SqftKind.ZERO\n      }, {\n        text: \"1K - 2K\",\n        value: SqftKind.ONE_THOUSAND\n      }, {\n        text: \"2K - 3K\",\n        value: SqftKind.TWO_THOUSAND\n      }, {\n        text: \"3K - 4K\",\n        value: SqftKind.THREE_THOUSAND\n      }, {\n        text: \"4K - 5K\",\n        value: SqftKind.FOUR_THOUSAND\n      }],\n      sorter: (a, b) => a.square_ft - b.square_ft,\n      onFilter: (value, record) => {\n        return record.square_ft >= value && record.square_ft < Number(value) + 1000;\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Column, {\n      title: \"Beds\",\n      dataIndex: \"beds\",\n      filters: [{\n        text: \"Bachelor\",\n        value: BedroomsKind.BACHELOR\n      }, {\n        text: \"1\",\n        value: BedroomsKind.ONE_BED\n      }, {\n        text: \"1 + Den\",\n        value: BedroomsKind.ONE_BED_PLUS_DEN\n      }, {\n        text: \"2\",\n        value: BedroomsKind.TWO_BED\n      }, {\n        text: \"2 + Den\",\n        value: BedroomsKind.TWO_BED_PLUS_DEN\n      }],\n      defaultFilteredValue: enableFilters ? getDefaultNumBedrooms() : null,\n      onFilter: (value, record) => {\n        return record.beds.toString().indexOf(value.toString()) === 0;\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Column, {\n      title: \"Baths\",\n      dataIndex: \"baths\",\n      filters: [{\n        text: \"1\",\n        value: BathroomsKind.ONE_BATH\n      }, {\n        text: \"2\",\n        value: BathroomsKind.TWO_BATH\n      }, {\n        text: \"3\",\n        value: BathroomsKind.THREE_BATH\n      }],\n      sorter: (a, b) => a.baths - b.baths,\n      defaultFilteredValue: enableFilters ? getDefaultNumBathrooms() : null,\n      onFilter: (value, record) => {\n        return record.baths.toString().indexOf(value.toString()) === 0;\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 177,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Column, {\n      title: \"Price\",\n      dataIndex: \"price\",\n      filters: [{\n        text: \"$0 - $1M\",\n        value: BudgetKind.ZERO\n      }, {\n        text: \"$1M - $2M\",\n        value: BudgetKind.ONE_MILLION\n      }, {\n        text: \"$2M - $3M\",\n        value: BudgetKind.TWO_MILLION\n      }, {\n        text: \"$3M - $4M\",\n        value: BudgetKind.THREE_MILLION\n      }, {\n        text: \"$4M - $5M\",\n        value: BudgetKind.FOUR_MILLION\n      }],\n      sorter: (a, b) => parseInt(a.price.replace(/,/g, \"\")) - parseInt(b.price.replace(/,/g, \"\")),\n      defaultFilteredValue: enableFilters ? getDefaultPrice() : null,\n      onFilter: (value, record) => {\n        return parseInt(record.price.replace(/,/g, \"\")) > value && parseInt(record.price.replace(/,/g, \"\")) < Number(value) + BudgetKind.ONE_MILLION;\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 200,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Column, {\n      title: \"Occupancy\",\n      dataIndex: \"occupancy_date\",\n      filters: [{\n        text: \"2022\",\n        value: OccupancyKind.TWO_THOUSAND_AND_TWENTY_TWO\n      }, {\n        text: \"2023\",\n        value: OccupancyKind.TWO_THOUSAND_AND_TWENTY_THREE\n      }, {\n        text: \"2024\",\n        value: OccupancyKind.TWO_THOUSAND_AND_TWENTY_FOUR\n      }],\n      sorter: (a, b) => a.occupancy_date - b.occupancy_date,\n      onFilter: (value, record) => {\n        return record.occupancy_date.toString().indexOf(value.toString()) === 0;\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 238,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 102,\n    columnNumber: 5\n  }, this);\n};\n\n_s(ResultTable, \"IfFaQSdlKEokGY9SfnjVq7/8jHA=\", false, function () {\n  return [useHistory];\n});\n\n_c = ResultTable;\nexport default ResultTable;\n\nvar _c;\n\n$RefreshReg$(_c, \"ResultTable\");","map":{"version":3,"sources":["/Users/farzanhaq/Desktop/PropertyPal/src/components/Results/Result/ResultTable.tsx"],"names":["FormContext","Column","useContext","useHistory","SqftKind","BedroomsKind","BathroomsKind","BudgetKind","OccupancyKind","Table","ResultTable","screening","units","enableFilters","history","formState","getDefaultNumBedrooms","numBedrooms","num_bedrooms","map","bedroom","BACHELOR","toString","ONE_BED","ONE_BED_PLUS_DEN","TWO_BED","TWO_BED_PLUS_DEN","getDefaultNumBathrooms","numBathrooms","num_bathrooms","bathroom","ONE_BATH","TWO_BATH","THREE_BATH","getDefaultPrice","prices","ZERO","ONE_MILLION","TWO_MILLION","THREE_MILLION","FOUR_MILLION","filter","price","budget","cursor","pageSize","y","record","onClick","push","id","text","value","ONE_THOUSAND","TWO_THOUSAND","THREE_THOUSAND","FOUR_THOUSAND","a","b","square_ft","Number","beds","indexOf","baths","parseInt","replace","TWO_THOUSAND_AND_TWENTY_TWO","TWO_THOUSAND_AND_TWENTY_THREE","TWO_THOUSAND_AND_TWENTY_FOUR","occupancy_date"],"mappings":"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","sourcesContent":["import { FormContext } from \"../../../utils/FormState\";\nimport Column from \"antd/lib/table/Column\";\nimport { useContext } from \"react\";\nimport { useHistory } from \"react-router\";\nimport {\n  SqftKind,\n  BedroomsKind,\n  BathroomsKind,\n  BudgetKind,\n  OccupancyKind,\n} from \"../../../utils/enums\";\nimport { Table } from \"antd\";\n\ninterface Unit {\n  id: string;\n  unit_number: number;\n  price: string;\n  beds: number;\n  baths: number;\n  square_ft: number;\n  occupancy_date: number;\n}\n\ninterface Screening {\n  id: string;\n  user_email: string;\n  buyer_experience: string;\n  buyer_purpose: string;\n  num_bedrooms: number[];\n  num_bathrooms: number[];\n  premiums: string[];\n  budget: number[];\n}\n\ninterface Props {\n  screening: Screening | undefined;\n  units: Unit[];\n  enableFilters: boolean;\n}\n\nconst ResultTable = ({ screening, units, enableFilters }: Props) => {\n  const history = useHistory();\n  const { formState } = useContext(FormContext);\n\n  const getDefaultNumBedrooms = () => {\n    const numBedrooms = screening?.num_bedrooms.map((bedroom: number) => {\n      switch (bedroom) {\n        case BedroomsKind.BACHELOR:\n          return BedroomsKind.BACHELOR.toString();\n        case BedroomsKind.ONE_BED:\n          return BedroomsKind.ONE_BED.toString();\n        case BedroomsKind.ONE_BED_PLUS_DEN:\n          return BedroomsKind.ONE_BED_PLUS_DEN.toString();\n        case BedroomsKind.TWO_BED:\n          return BedroomsKind.TWO_BED.toString();\n        case BedroomsKind.TWO_BED_PLUS_DEN:\n          return BedroomsKind.TWO_BED_PLUS_DEN.toString();\n        default:\n          return \"\";\n      }\n    });\n\n    return numBedrooms;\n  };\n\n  const getDefaultNumBathrooms = () => {\n    const numBathrooms = screening?.num_bathrooms.map((bathroom: number) => {\n      switch (bathroom) {\n        case BathroomsKind.ONE_BATH:\n          return BathroomsKind.ONE_BATH.toString();\n        case BathroomsKind.TWO_BATH:\n          return BathroomsKind.TWO_BATH.toString();\n        case BathroomsKind.THREE_BATH:\n          return BathroomsKind.THREE_BATH.toString();\n        default:\n          return \"\";\n      }\n    });\n\n    return numBathrooms;\n  };\n\n  const getDefaultPrice = () => {\n    const prices = [\n      BudgetKind.ZERO,\n      BudgetKind.ONE_MILLION,\n      BudgetKind.TWO_MILLION,\n      BudgetKind.THREE_MILLION,\n      BudgetKind.FOUR_MILLION,\n    ]\n      .filter((price) => {\n        return price >= formState.budget[0] && price < formState.budget[1];\n      })\n      .map((price) => {\n        return price.toString();\n      });\n\n    return prices;\n  };\n\n  return (\n    <Table<Unit>\n      style={{ cursor: \"pointer\" }}\n      dataSource={units}\n      pagination={{ pageSize: 25 }}\n      scroll={{ y: 350 }}\n      loading={screening ? false : true}\n      onRow={(record: { id: any }) => {\n        return {\n          onClick: () => history.push(`result/${record.id}`),\n        };\n      }}\n    >\n      <Column<Unit> title=\"Unit\" dataIndex=\"unit_number\" />\n      <Column<Unit>\n        title=\"SQFT\"\n        dataIndex=\"square_ft\"\n        filters={[\n          {\n            text: \"0 - 1K\",\n            value: SqftKind.ZERO,\n          },\n          {\n            text: \"1K - 2K\",\n            value: SqftKind.ONE_THOUSAND,\n          },\n          {\n            text: \"2K - 3K\",\n            value: SqftKind.TWO_THOUSAND,\n          },\n          {\n            text: \"3K - 4K\",\n            value: SqftKind.THREE_THOUSAND,\n          },\n          {\n            text: \"4K - 5K\",\n            value: SqftKind.FOUR_THOUSAND,\n          },\n        ]}\n        sorter={(a, b) => a.square_ft - b.square_ft}\n        onFilter={(value, record) => {\n          return (\n            record.square_ft >= value && record.square_ft < Number(value) + 1000\n          );\n        }}\n      />\n      <Column<Unit>\n        title=\"Beds\"\n        dataIndex=\"beds\"\n        filters={[\n          {\n            text: \"Bachelor\",\n            value: BedroomsKind.BACHELOR,\n          },\n          {\n            text: \"1\",\n            value: BedroomsKind.ONE_BED,\n          },\n          {\n            text: \"1 + Den\",\n            value: BedroomsKind.ONE_BED_PLUS_DEN,\n          },\n          {\n            text: \"2\",\n            value: BedroomsKind.TWO_BED,\n          },\n          {\n            text: \"2 + Den\",\n            value: BedroomsKind.TWO_BED_PLUS_DEN,\n          },\n        ]}\n        defaultFilteredValue={enableFilters ? getDefaultNumBedrooms() : null}\n        onFilter={(value, record) => {\n          return record.beds.toString().indexOf(value.toString()) === 0;\n        }}\n      />\n      <Column<Unit>\n        title=\"Baths\"\n        dataIndex=\"baths\"\n        filters={[\n          {\n            text: \"1\",\n            value: BathroomsKind.ONE_BATH,\n          },\n          {\n            text: \"2\",\n            value: BathroomsKind.TWO_BATH,\n          },\n          {\n            text: \"3\",\n            value: BathroomsKind.THREE_BATH,\n          },\n        ]}\n        sorter={(a, b) => a.baths - b.baths}\n        defaultFilteredValue={enableFilters ? getDefaultNumBathrooms() : null}\n        onFilter={(value, record) => {\n          return record.baths.toString().indexOf(value.toString()) === 0;\n        }}\n      />\n      <Column<Unit>\n        title=\"Price\"\n        dataIndex=\"price\"\n        filters={[\n          {\n            text: \"$0 - $1M\",\n            value: BudgetKind.ZERO,\n          },\n          {\n            text: \"$1M - $2M\",\n            value: BudgetKind.ONE_MILLION,\n          },\n          {\n            text: \"$2M - $3M\",\n            value: BudgetKind.TWO_MILLION,\n          },\n          {\n            text: \"$3M - $4M\",\n            value: BudgetKind.THREE_MILLION,\n          },\n          {\n            text: \"$4M - $5M\",\n            value: BudgetKind.FOUR_MILLION,\n          },\n        ]}\n        sorter={(a, b) =>\n          parseInt(a.price.replace(/,/g, \"\")) -\n          parseInt(b.price.replace(/,/g, \"\"))\n        }\n        defaultFilteredValue={enableFilters ? getDefaultPrice() : null}\n        onFilter={(value, record) => {\n          return (\n            parseInt(record.price.replace(/,/g, \"\")) > value &&\n            parseInt(record.price.replace(/,/g, \"\")) <\n              Number(value) + BudgetKind.ONE_MILLION\n          );\n        }}\n      />\n      <Column<Unit>\n        title=\"Occupancy\"\n        dataIndex=\"occupancy_date\"\n        filters={[\n          {\n            text: \"2022\",\n            value: OccupancyKind.TWO_THOUSAND_AND_TWENTY_TWO,\n          },\n          {\n            text: \"2023\",\n            value: OccupancyKind.TWO_THOUSAND_AND_TWENTY_THREE,\n          },\n          {\n            text: \"2024\",\n            value: OccupancyKind.TWO_THOUSAND_AND_TWENTY_FOUR,\n          },\n        ]}\n        sorter={(a, b) => a.occupancy_date - b.occupancy_date}\n        onFilter={(value, record) => {\n          return (\n            record.occupancy_date.toString().indexOf(value.toString()) === 0\n          );\n        }}\n      />\n    </Table>\n  );\n};\n\nexport default ResultTable;\n"]},"metadata":{},"sourceType":"module"}