{"ast":null,"code":"var _jsxFileName = \"/Users/farzanhaq/Desktop/PropertyPal/src/components/Results/Result/Result.tsx\",\n    _s = $RefreshSig$();\n\nimport { ArrowRightOutlined } from \"@ant-design/icons\";\nimport { Card, Col, Divider, Image, Row, Spin, Statistic, Tabs, Typography } from \"antd\";\nimport { API, Storage } from \"aws-amplify\";\nimport { useEffect, useState } from \"react\";\nimport { Link, useParams } from \"react-router-dom\";\nimport { listUnits } from \"../../../graphql/queries\";\nimport { StyledResultBookButton } from \"../../Styles/Button.style\";\nimport { StyledDiv, StyledLoadingDiv, StyledResultBookDiv, StyledResultFeesDiv, StyledResultGalleryDiv } from \"../../Styles/Div.style\";\nimport { StyledLoadingIcon } from \"../../Styles/LoadingOutlined.style\";\nimport { StyledResultParagraph } from \"../../Styles/Paragraph.style\";\nimport { StyledResultFeesRow } from \"../../Styles/Row.style\";\nimport { StyledTitle } from \"../../Styles/Title.style\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst {\n  TabPane\n} = Tabs;\nconst {\n  PreviewGroup\n} = Image;\n\nconst loadingIcon = /*#__PURE__*/_jsxDEV(StyledLoadingIcon, {\n  spin: true\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 54,\n  columnNumber: 34\n}, this);\n\nconst Result = () => {\n  _s();\n\n  const [unit, setUnit] = useState();\n  const [unitHeaders, setUnitHeaders] = useState();\n  const [renderingsImageLinks, setRenderingsImageLinks] = useState([\"\"]);\n  const [viewsImageLinks, setViewsImageLinks] = useState([\"\"]);\n  const [neighbourhoodImageLinks, setNeighbourhoodImageLinks] = useState([\"\"]);\n  const [floorplanImageLinks, setFloorplanImageLinks] = useState([\"\"]);\n  const {\n    id\n  } = useParams();\n  useEffect(() => {\n    getUnit();\n  }, []);\n  useEffect(() => {\n    getRenderingImages();\n    getViewsImages();\n    getNeighbourhoodImages();\n    getFloorplanImages();\n  }, [unit]);\n\n  const getUnit = async () => {\n    try {\n      const filter = {\n        id: {\n          eq: id\n        }\n      };\n      const selectedUnit = await API.graphql({\n        query: listUnits,\n        variables: {\n          filter: filter\n        }\n      });\n      const {\n        collection,\n        unit_number,\n        starting_floor,\n        price,\n        square_ft,\n        beds,\n        baths,\n        occupancy_date\n      } = selectedUnit.data.listUnits.items[0];\n      const selectedUnitObj = {\n        collection: collection,\n        unit_number: unit_number,\n        starting_floor: starting_floor,\n        price: price,\n        square_ft: square_ft,\n        beds: beds,\n        baths: baths,\n        occupancy_date: occupancy_date\n      };\n      setUnit(selectedUnitObj);\n      const selectedUnitHeaders = {\n        unit_number: unit_number,\n        price: price,\n        square_ft: square_ft,\n        beds: beds,\n        baths: baths,\n        occupancy_date: occupancy_date\n      };\n      setUnitHeaders(selectedUnitHeaders);\n    } catch (err) {\n      console.log(\"error getting units: \" + err);\n    }\n  };\n\n  const getRenderingImages = async () => {\n    try {\n      const renderingsImages = await Storage.list(\"renderings/\");\n      const renderingsImagesKeys = renderingsImages.slice(1, renderingsImages.length).map(image => {\n        return image.key;\n      });\n      const renderingsImageLinks = [\"\"];\n\n      for (const imageKey of renderingsImagesKeys) {\n        if (imageKey) {\n          const fileAccessURL = await Storage.get(imageKey);\n          renderingsImageLinks.push(fileAccessURL);\n        }\n      }\n\n      setRenderingsImageLinks(renderingsImageLinks);\n    } catch (err) {\n      console.log(\"error accessing the file from S3: \" + err);\n    }\n  };\n\n  const getViewsImages = async () => {\n    try {\n      const viewsImages = await Storage.list(`views/${unit === null || unit === void 0 ? void 0 : unit.starting_floor}/`);\n      const viewsImagesKeys = viewsImages.slice(1, viewsImages.length).map(image => {\n        return image.key;\n      });\n      const viewsImageLinks = [\"\"];\n\n      for (const imageKey of viewsImagesKeys) {\n        if (imageKey) {\n          const fileAccessURL = await Storage.get(imageKey);\n          viewsImageLinks.push(fileAccessURL);\n        }\n      }\n\n      setViewsImageLinks(viewsImageLinks);\n    } catch (err) {\n      console.log(\"error accessing the file from S3: \" + err);\n    }\n  };\n\n  const getNeighbourhoodImages = async () => {\n    try {\n      const neighbourhoodImages = await Storage.list(\"neighbourhood/\");\n      const neighbourhoodImagesKeys = neighbourhoodImages.slice(1, neighbourhoodImages.length).map(image => {\n        return image.key;\n      });\n      const neighbourhoodImageLinks = [\"\"];\n\n      for (const imageKey of neighbourhoodImagesKeys) {\n        if (imageKey) {\n          const fileAccessURL = await Storage.get(imageKey);\n          neighbourhoodImageLinks.push(fileAccessURL);\n        }\n      }\n\n      setNeighbourhoodImageLinks(neighbourhoodImageLinks);\n    } catch (err) {\n      console.log(\"error accessing the file from S3: \" + err);\n    }\n  };\n\n  const getFloorplanImages = async () => {\n    try {\n      const floorplanImages = await Storage.list(`floorplans/${(unit === null || unit === void 0 ? void 0 : unit.starting_floor) && (unit === null || unit === void 0 ? void 0 : unit.starting_floor) >= 9 && (unit === null || unit === void 0 ? void 0 : unit.starting_floor) <= 23 ? \"cielo\" : \"stratus\"}/`);\n      const floorplanImagesKeys = floorplanImages.slice(1, floorplanImages.length).map(image => {\n        return image.key;\n      });\n      const floorplanImageLinks = [\"\"];\n\n      for (const imageKey of floorplanImagesKeys) {\n        if (imageKey) {\n          const fileAccessURL = await Storage.get(imageKey);\n          floorplanImageLinks.push(fileAccessURL);\n        }\n      }\n\n      setFloorplanImageLinks(floorplanImageLinks);\n    } catch (err) {\n      console.log(\"error accessing the file from S3: \" + err);\n    }\n  };\n\n  const imagePaneData = [{\n    tabName: \"Renderings\",\n    images: renderingsImageLinks,\n    index: \"2\"\n  }, {\n    tabName: \"Views\",\n    images: viewsImageLinks,\n    index: \"3\"\n  }, {\n    tabName: \"Neighbourhood\",\n    images: neighbourhoodImageLinks,\n    index: \"4\"\n  }, {\n    tabName: \"Floorplan\",\n    images: floorplanImageLinks,\n    index: \"5\"\n  }];\n\n  const getHeaderName = key => {\n    if (key === \"unit_number\") {\n      return \"Unit\";\n    } else if (key === \"price\") {\n      return \"Price\";\n    } else if (key === \"square_ft\") {\n      return \"Square Foot\";\n    } else if (key === \"beds\") {\n      return \"Beds\";\n    } else if (key === \"baths\") {\n      return \"Baths\";\n    } else if (key === \"occupancy_date\") {\n      return \"Occupancy Date\";\n    }\n\n    return null;\n  };\n\n  const getHeaderValue = key => {\n    if (unitHeaders) {\n      if (key === \"price\") {\n        return `$${unitHeaders[\"price\"]}`;\n      } else {\n        return unitHeaders[key];\n      }\n    }\n\n    return null;\n  };\n\n  console.log(unit);\n  return /*#__PURE__*/_jsxDEV(StyledDiv, {\n    children: unit && unitHeaders ? /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(Typography, {\n        children: [/*#__PURE__*/_jsxDEV(StyledTitle, {\n          level: 2,\n          children: [(unit === null || unit === void 0 ? void 0 : unit.starting_floor) && (unit === null || unit === void 0 ? void 0 : unit.starting_floor) >= 9 && (unit === null || unit === void 0 ? void 0 : unit.starting_floor) <= 23 ? \"cielo\" : \"stratus\", \"Collection\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 324,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 332,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Row, {\n          children: Object.keys(unitHeaders).map(key => /*#__PURE__*/_jsxDEV(Col, {\n            span: 4,\n            children: [/*#__PURE__*/_jsxDEV(StyledResultParagraph, {\n              type: \"secondary\",\n              children: getHeaderName(key)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 336,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(StyledResultParagraph, {\n              type: \"secondary\",\n              children: getHeaderValue(key)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 339,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 335,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 333,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 323,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Divider, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 346,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(StyledResultBookDiv, {\n        children: /*#__PURE__*/_jsxDEV(StyledResultBookButton, {\n          type: \"primary\",\n          size: \"large\",\n          children: /*#__PURE__*/_jsxDEV(Link, {\n            to: \"/booking\",\n            children: [\"Book Now \", /*#__PURE__*/_jsxDEV(ArrowRightOutlined, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 350,\n              columnNumber: 26\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 349,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 348,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 347,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 354,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Tabs, {\n        tabPosition: \"left\",\n        children: [/*#__PURE__*/_jsxDEV(TabPane, {\n          tab: \"Costs\",\n          children: /*#__PURE__*/_jsxDEV(StyledResultFeesDiv, {\n            children: [/*#__PURE__*/_jsxDEV(StyledResultFeesRow, {\n              gutter: 16,\n              children: [/*#__PURE__*/_jsxDEV(Col, {\n                span: 12,\n                children: /*#__PURE__*/_jsxDEV(Card, {\n                  children: [/*#__PURE__*/_jsxDEV(Statistic, {\n                    title: \"Estimated Mortage\",\n                    value: 500000,\n                    prefix: \"$\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 361,\n                    columnNumber: 23\n                  }, this), /*#__PURE__*/_jsxDEV(Divider, {}, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 366,\n                    columnNumber: 23\n                  }, this), /*#__PURE__*/_jsxDEV(Typography, {\n                    children: [\" \", \"20% down payment \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 369,\n                      columnNumber: 42\n                    }, this), \" 25 year amortization \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 369,\n                      columnNumber: 70\n                    }, this), \" \", \"1.75% interest\"]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 367,\n                    columnNumber: 23\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 360,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 359,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(Col, {\n                span: 12,\n                children: /*#__PURE__*/_jsxDEV(Card, {\n                  children: [/*#__PURE__*/_jsxDEV(Statistic, {\n                    title: \"Maintenance Fees\",\n                    value: 1000,\n                    prefix: \"$\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 376,\n                    columnNumber: 23\n                  }, this), /*#__PURE__*/_jsxDEV(Divider, {}, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 381,\n                    columnNumber: 23\n                  }, this), /*#__PURE__*/_jsxDEV(Typography, {\n                    children: [\" \", \"Min: $0.30/ft \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 384,\n                      columnNumber: 39\n                    }, this), \" Avg: $0.40/ft \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 384,\n                      columnNumber: 60\n                    }, this), \" Max: $0.50/ft\", \" \"]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 382,\n                    columnNumber: 23\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 375,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 374,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 358,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(Row, {\n              gutter: 16,\n              children: [/*#__PURE__*/_jsxDEV(Col, {\n                span: 12,\n                children: /*#__PURE__*/_jsxDEV(Card, {\n                  children: [/*#__PURE__*/_jsxDEV(Statistic, {\n                    title: \"Utility Fees\",\n                    value: 500,\n                    prefix: \"$\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 392,\n                    columnNumber: 23\n                  }, this), /*#__PURE__*/_jsxDEV(Divider, {}, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 393,\n                    columnNumber: 23\n                  }, this), /*#__PURE__*/_jsxDEV(Typography, {\n                    children: [\" \", \"Electricity: $200 \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 396,\n                      columnNumber: 43\n                    }, this), \" Water: $200 \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 396,\n                      columnNumber: 62\n                    }, this), \" Internet: $100\", \" \"]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 394,\n                    columnNumber: 23\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 391,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 390,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(Col, {\n                span: 12,\n                children: /*#__PURE__*/_jsxDEV(Card, {\n                  children: [/*#__PURE__*/_jsxDEV(Statistic, {\n                    title: \"Taxes\",\n                    value: 750,\n                    prefix: \"$\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 403,\n                    columnNumber: 23\n                  }, this), /*#__PURE__*/_jsxDEV(Divider, {}, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 404,\n                    columnNumber: 23\n                  }, this), /*#__PURE__*/_jsxDEV(Typography, {\n                    children: [\" \", \"GST: $300 \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 407,\n                      columnNumber: 35\n                    }, this), \" HST: $200 \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 407,\n                      columnNumber: 52\n                    }, this), \" PST: $250\", \" \"]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 405,\n                    columnNumber: 23\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 402,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 401,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 389,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 357,\n            columnNumber: 15\n          }, this)\n        }, \"1\", false, {\n          fileName: _jsxFileName,\n          lineNumber: 356,\n          columnNumber: 13\n        }, this), imagePaneData.map((pane, index) => {\n          return /*#__PURE__*/_jsxDEV(TabPane, {\n            tab: imagePaneData[index].tabName,\n            children: /*#__PURE__*/_jsxDEV(StyledResultGalleryDiv, {\n              children: /*#__PURE__*/_jsxDEV(PreviewGroup, {\n                children: imagePaneData[index].images.map((image, idx) => {\n                  return /*#__PURE__*/_jsxDEV(\"div\", {\n                    children: /*#__PURE__*/_jsxDEV(Image, {\n                      src: image\n                    }, idx, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 426,\n                      columnNumber: 31\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 425,\n                    columnNumber: 29\n                  }, this);\n                })\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 421,\n                columnNumber: 21\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 420,\n              columnNumber: 19\n            }, this)\n          }, imagePaneData[index].index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 416,\n            columnNumber: 17\n          }, this);\n        })]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 355,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true) : /*#__PURE__*/_jsxDEV(StyledLoadingDiv, {\n      children: /*#__PURE__*/_jsxDEV(Spin, {\n        indicator: loadingIcon,\n        size: \"large\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 440,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 439,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 320,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Result, \"RxlcWXcpb8Gofr5Z90VftjuQ/xs=\", false, function () {\n  return [useParams];\n});\n\n_c = Result;\nexport default Result;\n\nvar _c;\n\n$RefreshReg$(_c, \"Result\");","map":{"version":3,"sources":["/Users/farzanhaq/Desktop/PropertyPal/src/components/Results/Result/Result.tsx"],"names":["ArrowRightOutlined","Card","Col","Divider","Image","Row","Spin","Statistic","Tabs","Typography","API","Storage","useEffect","useState","Link","useParams","listUnits","StyledResultBookButton","StyledDiv","StyledLoadingDiv","StyledResultBookDiv","StyledResultFeesDiv","StyledResultGalleryDiv","StyledLoadingIcon","StyledResultParagraph","StyledResultFeesRow","StyledTitle","TabPane","PreviewGroup","loadingIcon","Result","unit","setUnit","unitHeaders","setUnitHeaders","renderingsImageLinks","setRenderingsImageLinks","viewsImageLinks","setViewsImageLinks","neighbourhoodImageLinks","setNeighbourhoodImageLinks","floorplanImageLinks","setFloorplanImageLinks","id","getUnit","getRenderingImages","getViewsImages","getNeighbourhoodImages","getFloorplanImages","filter","eq","selectedUnit","graphql","query","variables","collection","unit_number","starting_floor","price","square_ft","beds","baths","occupancy_date","data","items","selectedUnitObj","selectedUnitHeaders","err","console","log","renderingsImages","list","renderingsImagesKeys","slice","length","map","image","key","imageKey","fileAccessURL","get","push","viewsImages","viewsImagesKeys","neighbourhoodImages","neighbourhoodImagesKeys","floorplanImages","floorplanImagesKeys","imagePaneData","tabName","images","index","getHeaderName","getHeaderValue","Object","keys","pane","idx"],"mappings":"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","sourcesContent":["import { ArrowRightOutlined } from \"@ant-design/icons\";\nimport { S3ProviderListOutput } from \"@aws-amplify/storage\";\nimport {\n  Card,\n  Col,\n  Divider,\n  Image,\n  Row,\n  Spin,\n  Statistic,\n  Tabs,\n  Typography\n} from \"antd\";\nimport { API, Storage } from \"aws-amplify\";\nimport { useEffect, useState } from \"react\";\nimport { Link, useParams } from \"react-router-dom\";\nimport { listUnits } from \"../../../graphql/queries\";\nimport { StyledResultBookButton } from \"../../Styles/Button.style\";\nimport {\n  StyledDiv,\n  StyledLoadingDiv,\n  StyledResultBookDiv,\n  StyledResultFeesDiv,\n  StyledResultGalleryDiv\n} from \"../../Styles/Div.style\";\nimport { StyledLoadingIcon } from \"../../Styles/LoadingOutlined.style\";\nimport { StyledResultParagraph } from \"../../Styles/Paragraph.style\";\nimport { StyledResultFeesRow } from \"../../Styles/Row.style\";\nimport { StyledTitle } from \"../../Styles/Title.style\";\n\nconst { TabPane } = Tabs;\nconst { PreviewGroup } = Image;\n\ninterface Unit {\n  collection: string;\n  unit_number: number;\n  starting_floor: number;\n  price: string;\n  square_ft: number;\n  beds: number;\n  baths: number;\n  occupancy_date: number;\n}\n\ninterface UnitHeaders {\n  unit_number: number;\n  price: string;\n  square_ft: number;\n  beds: number;\n  baths: number;\n  occupancy_date: number;\n}\n\nconst loadingIcon: JSX.Element = <StyledLoadingIcon spin />;\n\nconst Result = () => {\n  const [unit, setUnit] = useState<Unit>();\n  const [unitHeaders, setUnitHeaders] = useState<UnitHeaders>();\n  const [renderingsImageLinks, setRenderingsImageLinks] = useState<string[]>([\n    \"\",\n  ]);\n  const [viewsImageLinks, setViewsImageLinks] = useState<string[]>([\"\"]);\n  const [neighbourhoodImageLinks, setNeighbourhoodImageLinks] = useState<\n    string[]\n  >([\"\"]);\n  const [floorplanImageLinks, setFloorplanImageLinks] = useState<string[]>([\n    \"\",\n  ]);\n  const { id } = useParams<{ id: string }>();\n\n  useEffect(() => {\n    getUnit();\n  }, []);\n\n  useEffect(() => {\n    getRenderingImages();\n    getViewsImages();\n    getNeighbourhoodImages();\n    getFloorplanImages();\n  }, [unit]);\n\n  const getUnit = async () => {\n    try {\n      const filter: {\n        id: {\n          eq: string;\n        };\n      } = {\n        id: {\n          eq: id,\n        },\n      };\n\n      const selectedUnit: any = await API.graphql({\n        query: listUnits,\n        variables: { filter: filter },\n      });\n\n      const {\n        collection,\n        unit_number,\n        starting_floor,\n        price,\n        square_ft,\n        beds,\n        baths,\n        occupancy_date,\n      }: {\n        collection: string;\n        unit_number: number;\n        starting_floor: number;\n        price: string;\n        square_ft: number;\n        beds: number;\n        baths: number;\n        occupancy_date: number;\n      } = selectedUnit.data.listUnits.items[0];\n\n      const selectedUnitObj: Unit = {\n        collection: collection,\n        unit_number: unit_number,\n        starting_floor: starting_floor,\n        price: price,\n        square_ft: square_ft,\n        beds: beds,\n        baths: baths,\n        occupancy_date: occupancy_date,\n      };\n\n      setUnit(selectedUnitObj);\n\n      const selectedUnitHeaders: UnitHeaders = {\n        unit_number: unit_number,\n        price: price,\n        square_ft: square_ft,\n        beds: beds,\n        baths: baths,\n        occupancy_date: occupancy_date,\n      };\n\n      setUnitHeaders(selectedUnitHeaders);\n    } catch (err) {\n      console.log(\"error getting units: \" + err);\n    }\n  };\n\n  const getRenderingImages = async () => {\n    try {\n      const renderingsImages: S3ProviderListOutput = await Storage.list(\n        \"renderings/\"\n      );\n      const renderingsImagesKeys: (string | undefined)[] = renderingsImages\n        .slice(1, renderingsImages.length)\n        .map((image) => {\n          return image.key;\n        });\n\n      const renderingsImageLinks: string[] = [\"\"];\n\n      for (const imageKey of renderingsImagesKeys) {\n        if (imageKey) {\n          const fileAccessURL: string = await Storage.get(imageKey);\n\n          renderingsImageLinks.push(fileAccessURL);\n        }\n      }\n\n      setRenderingsImageLinks(renderingsImageLinks);\n    } catch (err) {\n      console.log(\"error accessing the file from S3: \" + err);\n    }\n  };\n\n  const getViewsImages = async () => {\n    try {\n      const viewsImages: S3ProviderListOutput = await Storage.list(\n        `views/${unit?.starting_floor}/`\n      );\n\n      const viewsImagesKeys: (string | undefined)[] = viewsImages\n        .slice(1, viewsImages.length)\n        .map((image) => {\n          return image.key;\n        });\n\n      const viewsImageLinks: string[] = [\"\"];\n\n      for (const imageKey of viewsImagesKeys) {\n        if (imageKey) {\n          const fileAccessURL: string = await Storage.get(imageKey);\n\n          viewsImageLinks.push(fileAccessURL);\n        }\n      }\n\n      setViewsImageLinks(viewsImageLinks);\n    } catch (err) {\n      console.log(\"error accessing the file from S3: \" + err);\n    }\n  };\n\n  const getNeighbourhoodImages = async () => {\n    try {\n      const neighbourhoodImages: S3ProviderListOutput = await Storage.list(\n        \"neighbourhood/\"\n      );\n      const neighbourhoodImagesKeys: (string | undefined)[] =\n        neighbourhoodImages\n          .slice(1, neighbourhoodImages.length)\n          .map((image) => {\n            return image.key;\n          });\n\n      const neighbourhoodImageLinks: string[] = [\"\"];\n\n      for (const imageKey of neighbourhoodImagesKeys) {\n        if (imageKey) {\n          const fileAccessURL: string = await Storage.get(imageKey);\n\n          neighbourhoodImageLinks.push(fileAccessURL);\n        }\n      }\n\n      setNeighbourhoodImageLinks(neighbourhoodImageLinks);\n    } catch (err) {\n      console.log(\"error accessing the file from S3: \" + err);\n    }\n  };\n\n  const getFloorplanImages = async () => {\n    try {\n      const floorplanImages: S3ProviderListOutput = await Storage.list(\n        `floorplans/${\n          unit?.starting_floor &&\n          unit?.starting_floor >= 9 &&\n          unit?.starting_floor <= 23\n            ? \"cielo\"\n            : \"stratus\"\n        }/`\n      );\n\n      const floorplanImagesKeys: (string | undefined)[] = floorplanImages\n        .slice(1, floorplanImages.length)\n        .map((image) => {\n          return image.key;\n        });\n\n      const floorplanImageLinks: string[] = [\"\"];\n\n      for (const imageKey of floorplanImagesKeys) {\n        if (imageKey) {\n          const fileAccessURL: string = await Storage.get(imageKey);\n\n          floorplanImageLinks.push(fileAccessURL);\n        }\n      }\n\n      setFloorplanImageLinks(floorplanImageLinks);\n    } catch (err) {\n      console.log(\"error accessing the file from S3: \" + err);\n    }\n  };\n\n  const imagePaneData = [\n    {\n      tabName: \"Renderings\",\n      images: renderingsImageLinks,\n      index: \"2\",\n    },\n    {\n      tabName: \"Views\",\n      images: viewsImageLinks,\n      index: \"3\",\n    },\n    {\n      tabName: \"Neighbourhood\",\n      images: neighbourhoodImageLinks,\n      index: \"4\",\n    },\n    {\n      tabName: \"Floorplan\",\n      images: floorplanImageLinks,\n      index: \"5\",\n    },\n  ];\n\n  const getHeaderName = (key: string) => {\n    if (key === \"unit_number\") {\n      return \"Unit\";\n    } else if (key === \"price\") {\n      return \"Price\";\n    } else if (key === \"square_ft\") {\n      return \"Square Foot\";\n    } else if (key === \"beds\") {\n      return \"Beds\";\n    } else if (key === \"baths\") {\n      return \"Baths\";\n    } else if (key === \"occupancy_date\") {\n      return \"Occupancy Date\";\n    }\n\n    return null;\n  };\n\n  const getHeaderValue = (key: string) => {\n    if (unitHeaders) {\n      if (key === \"price\") {\n        return `$${unitHeaders[\"price\"]}`;\n      } else {\n        return unitHeaders[key as keyof UnitHeaders];\n      }\n    }\n\n    return null;\n  };\n\n  console.log(unit);\n\n  return (\n    <StyledDiv>\n      {unit && unitHeaders ? (\n        <>\n          <Typography>\n            <StyledTitle level={2}>\n              {unit?.starting_floor &&\n              unit?.starting_floor >= 9 &&\n              unit?.starting_floor <= 23\n                ? \"cielo\"\n                : \"stratus\"}\n              Collection\n            </StyledTitle>\n            <br />\n            <Row>\n              {Object.keys(unitHeaders).map((key: string) => (\n                <Col span={4}>\n                  <StyledResultParagraph type=\"secondary\">\n                    {getHeaderName(key)}\n                  </StyledResultParagraph>\n                  <StyledResultParagraph type=\"secondary\">\n                    {getHeaderValue(key)}\n                  </StyledResultParagraph>\n                </Col>\n              ))}\n            </Row>\n          </Typography>\n          <Divider />\n          <StyledResultBookDiv>\n            <StyledResultBookButton type=\"primary\" size=\"large\">\n              <Link to=\"/booking\">\n                Book Now <ArrowRightOutlined />\n              </Link>\n            </StyledResultBookButton>\n          </StyledResultBookDiv>\n          <br />\n          <Tabs tabPosition=\"left\">\n            <TabPane tab=\"Costs\" key=\"1\">\n              <StyledResultFeesDiv>\n                <StyledResultFeesRow gutter={16}>\n                  <Col span={12}>\n                    <Card>\n                      <Statistic\n                        title=\"Estimated Mortage\"\n                        value={500000}\n                        prefix=\"$\"\n                      />\n                      <Divider />\n                      <Typography>\n                        {\" \"}\n                        20% down payment <br /> 25 year amortization <br />{\" \"}\n                        1.75% interest\n                      </Typography>\n                    </Card>\n                  </Col>\n                  <Col span={12}>\n                    <Card>\n                      <Statistic\n                        title=\"Maintenance Fees\"\n                        value={1000}\n                        prefix=\"$\"\n                      />\n                      <Divider />\n                      <Typography>\n                        {\" \"}\n                        Min: $0.30/ft <br /> Avg: $0.40/ft <br /> Max: $0.50/ft{\" \"}\n                      </Typography>\n                    </Card>\n                  </Col>\n                </StyledResultFeesRow>\n                <Row gutter={16}>\n                  <Col span={12}>\n                    <Card>\n                      <Statistic title=\"Utility Fees\" value={500} prefix=\"$\" />\n                      <Divider />\n                      <Typography>\n                        {\" \"}\n                        Electricity: $200 <br /> Water: $200 <br /> Internet:\n                        $100{\" \"}\n                      </Typography>\n                    </Card>\n                  </Col>\n                  <Col span={12}>\n                    <Card>\n                      <Statistic title=\"Taxes\" value={750} prefix=\"$\" />\n                      <Divider />\n                      <Typography>\n                        {\" \"}\n                        GST: $300 <br /> HST: $200 <br /> PST: $250{\" \"}\n                      </Typography>\n                    </Card>\n                  </Col>\n                </Row>\n              </StyledResultFeesDiv>\n            </TabPane>\n            {imagePaneData.map((pane, index) => {\n              return (\n                <TabPane\n                  tab={imagePaneData[index].tabName}\n                  key={imagePaneData[index].index}\n                >\n                  <StyledResultGalleryDiv>\n                    <PreviewGroup>\n                      {imagePaneData[index].images.map(\n                        (image: string, idx: number) => {\n                          return (\n                            <div>\n                              <Image key={idx} src={image} />\n                            </div>\n                          );\n                        }\n                      )}\n                    </PreviewGroup>\n                  </StyledResultGalleryDiv>\n                </TabPane>\n              );\n            })}\n          </Tabs>\n        </>\n      ) : (\n        <StyledLoadingDiv>\n          <Spin indicator={loadingIcon} size=\"large\" />\n        </StyledLoadingDiv>\n      )}\n    </StyledDiv>\n  );\n};\n\nexport default Result;\n"]},"metadata":{},"sourceType":"module"}