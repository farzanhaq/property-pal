{"ast":null,"code":"var _jsxFileName = \"/Users/farzanhaq/Desktop/PropertyPal/src/components/Results/Results.tsx\",\n    _s = $RefreshSig$();\n\nimport { FilterOutlined } from \"@ant-design/icons\";\nimport { Divider, Table, Typography, message, Spin } from \"antd\";\nimport { FormContext } from \"../../utils/FormState\";\nimport { useContext, useEffect, useState } from \"react\";\nimport { BathroomsKind, BedroomsKind, BudgetKind, OccupancyKind, SqftKind } from \"../../utils/enums\";\nimport { useHistory } from \"react-router-dom\";\nimport { StyledSubtitle, StyledTitle } from \"../Styles/Title.style\";\nimport { StyledContentDiv, StyledDiv } from \"../Styles/Div.style\";\nimport API, { graphqlOperation } from \"@aws-amplify/api\";\nimport { listScreenings, listUnits } from \"../../graphql/queries\";\nimport { StyledLoadingIcon } from \"../Styles/LoadingOutlined.style\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst {\n  Column\n} = Table;\n\nconst loadingIcon = /*#__PURE__*/_jsxDEV(StyledLoadingIcon, {\n  spin: true\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 41,\n  columnNumber: 21\n}, this);\n\nconst Results = () => {\n  _s();\n\n  const [units, setUnits] = useState([]);\n  const [screening, setScreening] = useState();\n  const {\n    formState\n  } = useContext(FormContext);\n  const history = useHistory();\n  useEffect(() => {\n    message.info({\n      content: \"Tip: Click on the filter icon to narrow your results\",\n      icon: /*#__PURE__*/_jsxDEV(FilterOutlined, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 13\n      }, this),\n      duration: 5\n    });\n    getUnits();\n    getScreening();\n  }, []);\n\n  const getUnits = async () => {\n    try {\n      const allUnits = await API.graphql(graphqlOperation(listUnits));\n      setUnits(allUnits.data.listUnits.items);\n    } catch (err) {\n      console.log(err);\n    }\n  };\n\n  const getScreening = async () => {\n    try {\n      const screeningData = await API.graphql(graphqlOperation(listScreenings));\n      setScreening(screeningData.data.listScreenings.items[0]);\n    } catch (err) {\n      console.log(err);\n    }\n  };\n\n  console.log(units);\n\n  const getDefaultNumBedrooms = () => {\n    const numBedrooms = screening === null || screening === void 0 ? void 0 : screening.num_bedrooms.map(bedroom => {\n      switch (bedroom) {\n        case BedroomsKind.BACHELOR:\n          return BedroomsKind.BACHELOR.toString();\n\n        case BedroomsKind.ONE_BED:\n          return BedroomsKind.ONE_BED.toString();\n\n        case BedroomsKind.ONE_BED_PLUS_DEN:\n          return BedroomsKind.ONE_BED_PLUS_DEN.toString();\n\n        case BedroomsKind.TWO_BED:\n          return BedroomsKind.TWO_BED.toString();\n\n        case BedroomsKind.TWO_BED_PLUS_DEN:\n          return BedroomsKind.TWO_BED_PLUS_DEN.toString();\n\n        default:\n          return \"\";\n      }\n    });\n    return numBedrooms;\n  };\n\n  const getDefaultNumBathrooms = () => {\n    const numBathrooms = screening === null || screening === void 0 ? void 0 : screening.num_bathrooms.map(bathroom => {\n      switch (bathroom) {\n        case BathroomsKind.ONE_BATH:\n          return BathroomsKind.ONE_BATH.toString();\n\n        case BathroomsKind.TWO_BATH:\n          return BathroomsKind.TWO_BATH.toString();\n\n        case BathroomsKind.THREE_BATH:\n          return BathroomsKind.THREE_BATH.toString();\n\n        default:\n          return \"\";\n      }\n    });\n    return numBathrooms;\n  };\n\n  const getDefaultPrice = () => {\n    const prices = [BudgetKind.ZERO, BudgetKind.ONE_MILLION, BudgetKind.TWO_MILLION, BudgetKind.THREE_MILLION, BudgetKind.FOUR_MILLION].filter(price => {\n      return price >= formState.budget[0] && price < formState.budget[1];\n    }).map(price => {\n      return price.toString();\n    });\n    return prices;\n  };\n\n  return /*#__PURE__*/_jsxDEV(StyledDiv, {\n    children: [/*#__PURE__*/_jsxDEV(Typography, {\n      children: [/*#__PURE__*/_jsxDEV(StyledTitle, {\n        level: 2,\n        children: \"Property Finder\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(StyledSubtitle, {\n        level: 5,\n        type: \"secondary\",\n        children: \"A list of our available properties\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Divider, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 7\n    }, this), screening ? /*#__PURE__*/_jsxDEV(Table, {\n      style: {\n        cursor: \"pointer\"\n      },\n      dataSource: units,\n      pagination: {\n        pageSize: 25\n      },\n      scroll: {\n        y: 350\n      },\n      onRow: record => {\n        return {\n          onClick: () => history.push(\"result\")\n        };\n      },\n      children: [/*#__PURE__*/_jsxDEV(Column, {\n        title: \"Unit\",\n        dataIndex: \"unit_number\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 159,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Column, {\n        title: \"SQFT\",\n        dataIndex: \"square_ft\",\n        filters: [{\n          text: \"0 - 1K\",\n          value: SqftKind.ZERO\n        }, {\n          text: \"1K - 2K\",\n          value: SqftKind.ONE_THOUSAND\n        }, {\n          text: \"2K - 3K\",\n          value: SqftKind.TWO_THOUSAND\n        }, {\n          text: \"3K - 4K\",\n          value: SqftKind.THREE_THOUSAND\n        }, {\n          text: \"4K - 5K\",\n          value: SqftKind.FOUR_THOUSAND\n        }],\n        sorter: (a, b) => a.square_ft - b.square_ft,\n        onFilter: (value, record) => {\n          return record.square_ft >= value && record.square_ft < Number(value) + 1000;\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 160,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Column, {\n        title: \"Beds\",\n        dataIndex: \"beds\",\n        filters: [{\n          text: \"Bachelor\",\n          value: BedroomsKind.BACHELOR\n        }, {\n          text: \"1\",\n          value: BedroomsKind.ONE_BED\n        }, {\n          text: \"1 + Den\",\n          value: BedroomsKind.ONE_BED_PLUS_DEN\n        }, {\n          text: \"2\",\n          value: BedroomsKind.TWO_BED\n        }, {\n          text: \"2 + Den\",\n          value: BedroomsKind.TWO_BED_PLUS_DEN\n        }],\n        sorter: (a, b) => a.beds - b.beds,\n        defaultFilteredValue: getDefaultNumBedrooms(),\n        onFilter: (value, record) => {\n          return record.beds.toString().indexOf(value.toString()) === 0;\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 193,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Column, {\n        title: \"Baths\",\n        dataIndex: \"baths\",\n        filters: [{\n          text: \"1\",\n          value: BathroomsKind.ONE_BATH\n        }, {\n          text: \"2\",\n          value: BathroomsKind.TWO_BATH\n        }, {\n          text: \"3\",\n          value: BathroomsKind.THREE_BATH\n        }],\n        sorter: (a, b) => a.baths - b.baths,\n        defaultFilteredValue: getDefaultNumBathrooms(),\n        onFilter: (value, record) => {\n          return record.baths.toString().indexOf(value.toString()) === 0;\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 224,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Column, {\n        title: \"Price\",\n        dataIndex: \"price\",\n        filters: [{\n          text: \"$0 - $1M\",\n          value: BudgetKind.ZERO\n        }, {\n          text: \"$1M - $2M\",\n          value: BudgetKind.ONE_MILLION\n        }, {\n          text: \"$2M - $3M\",\n          value: BudgetKind.TWO_MILLION\n        }, {\n          text: \"$3M - $4M\",\n          value: BudgetKind.THREE_MILLION\n        }, {\n          text: \"$4M - $5M\",\n          value: BudgetKind.FOUR_MILLION\n        }],\n        sorter: (a, b) => parseInt(a.price.replace(/,/g, \"\")) - parseInt(b.price.replace(/,/g, \"\")),\n        defaultFilteredValue: getDefaultPrice(),\n        onFilter: (value, record) => {\n          return parseInt(record.price) > value && parseInt(record.price) < Number(value) + BudgetKind.ONE_MILLION;\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 247,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Column, {\n        title: \"Occupancy\",\n        dataIndex: \"occupancy_date\",\n        filters: [{\n          text: \"2022\",\n          value: OccupancyKind.TWO_THOUSAND_AND_TWENTY_TWO\n        }, {\n          text: \"2023\",\n          value: OccupancyKind.TWO_THOUSAND_AND_TWENTY_THREE\n        }, {\n          text: \"2024\",\n          value: OccupancyKind.TWO_THOUSAND_AND_TWENTY_FOUR\n        }],\n        sorter: (a, b) => a.occupancy_date - b.occupancy_date\n      }, \"occupancy\", false, {\n        fileName: _jsxFileName,\n        lineNumber: 284,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(StyledContentDiv, {\n      children: /*#__PURE__*/_jsxDEV(Spin, {\n        indicator: loadingIcon,\n        size: \"large\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 307,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 306,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 139,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Results, \"Dj8YT2WwvBqtgmVkJ7JQrnkiYSw=\", false, function () {\n  return [useHistory];\n});\n\n_c = Results;\nexport default Results;\n\nvar _c;\n\n$RefreshReg$(_c, \"Results\");","map":{"version":3,"sources":["/Users/farzanhaq/Desktop/PropertyPal/src/components/Results/Results.tsx"],"names":["FilterOutlined","Divider","Table","Typography","message","Spin","FormContext","useContext","useEffect","useState","BathroomsKind","BedroomsKind","BudgetKind","OccupancyKind","SqftKind","useHistory","StyledSubtitle","StyledTitle","StyledContentDiv","StyledDiv","API","graphqlOperation","listScreenings","listUnits","StyledLoadingIcon","Column","loadingIcon","Results","units","setUnits","screening","setScreening","formState","history","info","content","icon","duration","getUnits","getScreening","allUnits","graphql","data","items","err","console","log","screeningData","getDefaultNumBedrooms","numBedrooms","num_bedrooms","map","bedroom","BACHELOR","toString","ONE_BED","ONE_BED_PLUS_DEN","TWO_BED","TWO_BED_PLUS_DEN","getDefaultNumBathrooms","numBathrooms","num_bathrooms","bathroom","ONE_BATH","TWO_BATH","THREE_BATH","getDefaultPrice","prices","ZERO","ONE_MILLION","TWO_MILLION","THREE_MILLION","FOUR_MILLION","filter","price","budget","cursor","pageSize","y","record","onClick","push","text","value","ONE_THOUSAND","TWO_THOUSAND","THREE_THOUSAND","FOUR_THOUSAND","a","b","square_ft","Number","beds","indexOf","baths","parseInt","replace","TWO_THOUSAND_AND_TWENTY_TWO","TWO_THOUSAND_AND_TWENTY_THREE","TWO_THOUSAND_AND_TWENTY_FOUR","occupancy_date"],"mappings":"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","sourcesContent":["import { FilterOutlined } from \"@ant-design/icons\";\nimport { Divider, Table, Typography, message, Spin } from \"antd\";\nimport { FormContext } from \"../../utils/FormState\";\nimport { useContext, useEffect, useState } from \"react\";\nimport {\n  BathroomsKind,\n  BedroomsKind,\n  BudgetKind,\n  OccupancyKind,\n  SqftKind,\n} from \"../../utils/enums\";\nimport { useHistory } from \"react-router-dom\";\nimport { StyledSubtitle, StyledTitle } from \"../Styles/Title.style\";\nimport { StyledContentDiv, StyledDiv } from \"../Styles/Div.style\";\nimport API, { graphqlOperation } from \"@aws-amplify/api\";\nimport { listScreenings, listUnits } from \"../../graphql/queries\";\nimport { StyledLoadingIcon } from \"../Styles/LoadingOutlined.style\";\n\nconst { Column } = Table;\ninterface Unit {\n  id: string;\n  unit_number: number;\n  price: string;\n  beds: number;\n  baths: number;\n  square_ft: number;\n  occupancy_date: number;\n}\n\ninterface Screening {\n  id: string;\n  user_email: string;\n  buyer_experience: string;\n  buyer_purpose: string;\n  num_bedrooms: number[];\n  num_bathrooms: number[];\n  premiums: string[];\n  budget: number[];\n}\n\nconst loadingIcon = <StyledLoadingIcon spin />;\n\nconst Results = () => {\n  const [units, setUnits] = useState<Unit[]>([]);\n  const [screening, setScreening] = useState<Screening>();\n  const { formState } = useContext(FormContext);\n  const history = useHistory();\n\n  useEffect(() => {\n    message.info({\n      content: \"Tip: Click on the filter icon to narrow your results\",\n      icon: <FilterOutlined />,\n      duration: 5,\n    });\n\n    getUnits();\n    getScreening();\n  }, []);\n\n  const getUnits = async () => {\n    try {\n      const allUnits: any = await API.graphql(graphqlOperation(listUnits));\n      setUnits(allUnits.data.listUnits.items);\n    } catch (err) {\n      console.log(err);\n    }\n  };\n\n  const getScreening = async () => {\n    try {\n      const screeningData: any = await API.graphql(\n        graphqlOperation(listScreenings)\n      );\n      setScreening(screeningData.data.listScreenings.items[0]);\n    } catch (err) {\n      console.log(err);\n    }\n  };\n\n  console.log(units)\n\n  const getDefaultNumBedrooms = () => {\n    const numBedrooms = screening?.num_bedrooms.map((bedroom: number) => {\n      switch (bedroom) {\n        case BedroomsKind.BACHELOR:\n          return BedroomsKind.BACHELOR.toString();\n        case BedroomsKind.ONE_BED:\n          return BedroomsKind.ONE_BED.toString();\n        case BedroomsKind.ONE_BED_PLUS_DEN:\n          return BedroomsKind.ONE_BED_PLUS_DEN.toString();\n        case BedroomsKind.TWO_BED:\n          return BedroomsKind.TWO_BED.toString();\n        case BedroomsKind.TWO_BED_PLUS_DEN:\n          return BedroomsKind.TWO_BED_PLUS_DEN.toString();\n        default:\n          return \"\";\n      }\n    });\n\n    return numBedrooms;\n  };\n\n  const getDefaultNumBathrooms = () => {\n    const numBathrooms = screening?.num_bathrooms.map((bathroom: number) => {\n      switch (bathroom) {\n        case BathroomsKind.ONE_BATH:\n          return BathroomsKind.ONE_BATH.toString();\n        case BathroomsKind.TWO_BATH:\n          return BathroomsKind.TWO_BATH.toString();\n        case BathroomsKind.THREE_BATH:\n          return BathroomsKind.THREE_BATH.toString();\n        default:\n          return \"\";\n      }\n    });\n\n    return numBathrooms;\n  };\n\n  const getDefaultPrice = () => {\n    const prices = [\n      BudgetKind.ZERO,\n      BudgetKind.ONE_MILLION,\n      BudgetKind.TWO_MILLION,\n      BudgetKind.THREE_MILLION,\n      BudgetKind.FOUR_MILLION,\n    ]\n      .filter((price) => {\n        return price >= formState.budget[0] && price < formState.budget[1];\n      })\n      .map((price) => {\n        return price.toString();\n      });\n\n    return prices;\n  };\n\n  return (\n    <StyledDiv>\n      <Typography>\n        <StyledTitle level={2}>Property Finder</StyledTitle>\n        <StyledSubtitle level={5} type=\"secondary\">\n          A list of our available properties\n        </StyledSubtitle>\n      </Typography>\n      <Divider />\n      {screening ? (\n        <Table<Unit>\n          style={{ cursor: \"pointer\" }}\n          dataSource={units}\n          pagination={{ pageSize: 25 }}\n          scroll={{ y: 350 }}\n          onRow={(record) => {\n            return {\n              onClick: () => history.push(\"result\"),\n            };\n          }}\n        >\n          <Column<Unit> title=\"Unit\" dataIndex=\"unit_number\" />\n          <Column<Unit>\n            title=\"SQFT\"\n            dataIndex=\"square_ft\"\n            filters={[\n              {\n                text: \"0 - 1K\",\n                value: SqftKind.ZERO,\n              },\n              {\n                text: \"1K - 2K\",\n                value: SqftKind.ONE_THOUSAND,\n              },\n              {\n                text: \"2K - 3K\",\n                value: SqftKind.TWO_THOUSAND,\n              },\n              {\n                text: \"3K - 4K\",\n                value: SqftKind.THREE_THOUSAND,\n              },\n              {\n                text: \"4K - 5K\",\n                value: SqftKind.FOUR_THOUSAND,\n              },\n            ]}\n            sorter={(a, b) => a.square_ft - b.square_ft}\n            onFilter={(value, record) => {\n              return (\n                record.square_ft >= value &&\n                record.square_ft < Number(value) + 1000\n              );\n            }}\n          />\n          <Column<Unit>\n            title=\"Beds\"\n            dataIndex=\"beds\"\n            filters={[\n              {\n                text: \"Bachelor\",\n                value: BedroomsKind.BACHELOR,\n              },\n              {\n                text: \"1\",\n                value: BedroomsKind.ONE_BED,\n              },\n              {\n                text: \"1 + Den\",\n                value: BedroomsKind.ONE_BED_PLUS_DEN,\n              },\n              {\n                text: \"2\",\n                value: BedroomsKind.TWO_BED,\n              },\n              {\n                text: \"2 + Den\",\n                value: BedroomsKind.TWO_BED_PLUS_DEN,\n              },\n            ]}\n            sorter={(a, b) => a.beds - b.beds}\n            defaultFilteredValue={getDefaultNumBedrooms()}\n            onFilter={(value, record) => {\n              return record.beds.toString().indexOf(value.toString()) === 0;\n            }}\n          />\n          <Column<Unit>\n            title=\"Baths\"\n            dataIndex=\"baths\"\n            filters={[\n              {\n                text: \"1\",\n                value: BathroomsKind.ONE_BATH,\n              },\n              {\n                text: \"2\",\n                value: BathroomsKind.TWO_BATH,\n              },\n              {\n                text: \"3\",\n                value: BathroomsKind.THREE_BATH,\n              },\n            ]}\n            sorter={(a, b) => a.baths - b.baths}\n            defaultFilteredValue={getDefaultNumBathrooms()}\n            onFilter={(value, record) => {\n              return record.baths.toString().indexOf(value.toString()) === 0;\n            }}\n          />\n          <Column<Unit>\n            title=\"Price\"\n            dataIndex=\"price\"\n            filters={[\n              {\n                text: \"$0 - $1M\",\n                value: BudgetKind.ZERO,\n              },\n              {\n                text: \"$1M - $2M\",\n                value: BudgetKind.ONE_MILLION,\n              },\n              {\n                text: \"$2M - $3M\",\n                value: BudgetKind.TWO_MILLION,\n              },\n              {\n                text: \"$3M - $4M\",\n                value: BudgetKind.THREE_MILLION,\n              },\n              {\n                text: \"$4M - $5M\",\n                value: BudgetKind.FOUR_MILLION,\n              },\n            ]}\n            sorter={(a, b) =>\n              parseInt(a.price.replace(/,/g, \"\")) -\n              parseInt(b.price.replace(/,/g, \"\"))\n            }\n            defaultFilteredValue={getDefaultPrice()}\n            onFilter={(value, record) => {\n              return (\n                parseInt(record.price) > value &&\n                parseInt(record.price) < Number(value) + BudgetKind.ONE_MILLION\n              );\n            }}\n          />\n          <Column<Unit>\n            key=\"occupancy\"\n            title=\"Occupancy\"\n            dataIndex=\"occupancy_date\"\n            filters={[\n              {\n                text: \"2022\",\n                value: OccupancyKind.TWO_THOUSAND_AND_TWENTY_TWO,\n              },\n              {\n                text: \"2023\",\n                value: OccupancyKind.TWO_THOUSAND_AND_TWENTY_THREE,\n              },\n              {\n                text: \"2024\",\n                value: OccupancyKind.TWO_THOUSAND_AND_TWENTY_FOUR,\n              },\n            ]}\n            sorter={(a, b) => a.occupancy_date - b.occupancy_date}\n          />\n        </Table>\n      ) : (\n        <StyledContentDiv>\n          <Spin indicator={loadingIcon} size=\"large\" />\n        </StyledContentDiv>\n      )}\n    </StyledDiv>\n  );\n};\n\nexport default Results;\n"]},"metadata":{},"sourceType":"module"}